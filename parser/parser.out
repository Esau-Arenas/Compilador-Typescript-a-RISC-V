Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LET

Grammar

Rule 0     S' -> s
Rule 1     s -> block
Rule 2     block -> block instruccion
Rule 3     block -> instruccion
Rule 4     instruccion -> print
Rule 5     instruccion -> ifinstruction
Rule 6     instruccion -> forinstruction
Rule 7     instruccion -> switchinstruction
Rule 8     instruccion -> whileinstruction
Rule 9     instruccion -> declaration
Rule 10    instruccion -> arraydeclaration
Rule 11    instruccion -> assignment
Rule 12    instruccion -> assignmentsuma
Rule 13    instruccion -> assignmentresta
Rule 14    instruccion -> breakstmt
Rule 15    instruccion -> continuestmt
Rule 16    instruccion -> functionstmt
Rule 17    instruccion -> call
Rule 18    instruccion -> returnstmt
Rule 19    instruccion -> toLowerinstruction
Rule 20    instruccion -> toUpperinstruction
Rule 21    instruccion -> parseintinstruction
Rule 22    instruccion -> parsefloatinstruction
Rule 23    instruccion -> pushinstruction
Rule 24    print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
Rule 25    ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
Rule 26    ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
Rule 27    ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
Rule 28    forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
Rule 29    Recurinstruction -> ID MAS MAS
Rule 30    Recurinstruction -> ID MENOS MENOS
Rule 31    switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
Rule 32    caseinstruction -> caseinstruction caseindividual
Rule 33    caseinstruction -> caseindividual
Rule 34    caseindividual -> cases DOSPTS block BREAK PYC
Rule 35    cases -> CASE expression
Rule 36    cases -> DEFAULT
Rule 37    whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
Rule 38    declaration -> VAR ID DOSPTS type IG expression PYC
Rule 39    declaration -> VAR ID IG expression PYC
Rule 40    declaration -> CONST ID DOSPTS type IG expression PYC
Rule 41    declaration -> CONST ID IG expression PYC
Rule 42    arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
Rule 43    assignment -> ID IG expression PYC
Rule 44    assignmentsuma -> ID MAS IG expression PYC
Rule 45    assignmentresta -> ID MENOS IG expression PYC
Rule 46    returnstmt -> RETURN expression PYC
Rule 47    returnstmt -> RETURN PYC
Rule 48    call -> ID PARIZQ expressionList PARDER PYC
Rule 49    call -> ID PARIZQ PARDER PYC
Rule 50    functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
Rule 51    funcparams -> PARIZQ paramsList PARDER
Rule 52    funcparams -> PARIZQ PARDER
Rule 53    paramsList -> paramsList COMA ID DOSPTS type
Rule 54    paramsList -> ID DOSPTS type
Rule 55    paramsList -> paramsList ID DOSPTS type CORIZQ CORDER
Rule 56    paramsList -> ID DOSPTS type CORIZQ CORDER
Rule 57    functype -> DOSPTS type
Rule 58    functype -> <empty>
Rule 59    breakstmt -> BREAK PYC
Rule 60    continuestmt -> CONTINUE PYC
Rule 61    toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
Rule 62    toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
Rule 63    parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
Rule 64    parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
Rule 65    pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC
Rule 66    type -> NUMBER
Rule 67    type -> FLOAT
Rule 68    type -> STRING
Rule 69    type -> CHAR
Rule 70    type -> BOOL
Rule 71    expressionList -> expressionList COMA expression
Rule 72    expressionList -> expression
Rule 73    expression -> expression MAS expression
Rule 74    expression -> expression MENOS expression
Rule 75    expression -> expression POR expression
Rule 76    expression -> expression DIVIDIDO expression
Rule 77    expression -> expression MODULO expression
Rule 78    expression -> expression MAYOR expression
Rule 79    expression -> expression MENOR expression
Rule 80    expression -> expression MAYORIG expression
Rule 81    expression -> expression MENORIG expression
Rule 82    expression -> expression IGIG expression
Rule 83    expression -> expression DIF expression
Rule 84    expression -> expression AND expression
Rule 85    expression -> expression OR expression
Rule 86    expression -> NOT expression
Rule 87    expression -> PARIZQ expression PARDER
Rule 88    expression -> expression TERN expression DOSPTS expression
Rule 89    expression -> ENTERO
Rule 90    expression -> DECIMAL
Rule 91    expression -> BOOLEANO
Rule 92    expression -> CADENA
Rule 93    expression -> CARACTER
Rule 94    expression -> listArray
Rule 95    expression -> CORIZQ expressionList CORDER
Rule 96    expression -> ID PARIZQ expressionList PARDER
Rule 97    expression -> ID PARIZQ PARDER
Rule 98    listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER
Rule 99    listArray -> listArray PUNTO POP PARIZQ PARDER
Rule 100   listArray -> listArray PUNTO JOIN PARIZQ PARDER
Rule 101   listArray -> listArray PUNTO TOSTRING PARIZQ PARDER
Rule 102   listArray -> listArray CORIZQ expression CORDER
Rule 103   listArray -> listArray PUNTO LENGTH
Rule 104   listArray -> listArray PUNTO ID
Rule 105   listArray -> ID
Rule 106   expression -> TYPEOF ID

Terminals, with rules where they appear

AND                  : 84
BOOL                 : 70
BOOLEANO             : 91
BREAK                : 34 59
CADENA               : 92
CARACTER             : 93
CASE                 : 35
CHAR                 : 69
COMA                 : 53 71
CONSOLE              : 24
CONST                : 40 41 61 62 63 64
CONTINUE             : 60
CORDER               : 42 55 56 95 102
CORIZQ               : 42 55 56 95 102
DECIMAL              : 90
DEFAULT              : 36
DIF                  : 83
DIVIDIDO             : 76
DOSPTS               : 34 38 40 42 53 54 55 56 57 61 62 63 64 88
ELSE                 : 26 27
ENTERO               : 89
FLOAT                : 67
FOR                  : 28
FUNC                 : 50
ID                   : 29 30 38 39 40 41 42 43 44 45 48 49 50 53 54 55 56 61 61 62 62 63 64 65 96 97 104 105 106
IF                   : 25 26 27
IG                   : 38 39 40 41 42 43 44 45 61 62 63 64
IGIG                 : 82
INDEXOF              : 98
JOIN                 : 100
LENGTH               : 103
LET                  : 
LLAVEDER             : 25 26 26 27 28 31 37 50
LLAVEIZQ             : 25 26 26 27 28 31 37 50
LOG                  : 24
MAS                  : 29 29 44 73
MAYOR                : 78
MAYORIG              : 80
MENOR                : 79
MENORIG              : 81
MENOS                : 30 30 45 74
MODULO               : 77
NOT                  : 86
NUMBER               : 66
OR                   : 85
PARDER               : 24 25 26 27 28 31 37 48 49 51 52 61 62 63 64 65 87 96 97 98 99 100 101
PARIZQ               : 24 25 26 27 28 31 37 48 49 51 52 61 62 63 64 65 87 96 97 98 99 100 101
PARSEFLOAT           : 64
PARSEINT             : 63
POP                  : 99
POR                  : 75
PUNTO                : 24 61 62 65 98 99 100 101 103 104
PUSH                 : 65
PYC                  : 24 28 34 38 39 40 41 42 43 44 45 46 47 48 49 59 60 61 62 63 64 65
RETURN               : 46 47
STRING               : 68
SWITCH               : 31
TERN                 : 88
TOLOWER              : 61
TOSTRING             : 101
TOUPPER              : 62
TYPEOF               : 106
VAR                  : 38 39 42
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

Recurinstruction     : 28
arraydeclaration     : 10
assignment           : 11
assignmentresta      : 13
assignmentsuma       : 12
block                : 1 2 25 26 26 27 27 28 34 37 50
breakstmt            : 14
call                 : 17
caseindividual       : 32 33
caseinstruction      : 31 32
cases                : 34
continuestmt         : 15
declaration          : 9 28
expression           : 25 26 27 28 31 35 37 38 39 40 41 42 43 44 45 46 63 64 65 71 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 87 88 88 88 98 102
expressionList       : 24 48 71 95 96
forinstruction       : 6
funcparams           : 50
functionstmt         : 16
functype             : 50
ifinstruction        : 5
instruccion          : 2 3
listArray            : 94 98 99 100 101 102 103 104
paramsList           : 51 53 55
parsefloatinstruction : 22
parseintinstruction  : 21
print                : 4
pushinstruction      : 23
returnstmt           : 18
s                    : 0
switchinstruction    : 7
toLowerinstruction   : 19
toUpperinstruction   : 20
type                 : 38 40 42 53 54 55 56 57 61 62 63 64
whileinstruction     : 8

Parsing method: LALR

state 0

    (0) S' -> . s
    (1) s -> . block
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    s                              shift and go to state 1
    block                          shift and go to state 2
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 1

    (0) S' -> s .



state 2

    (1) s -> block .
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    $end            reduce using rule 1 (s -> block .)
    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    instruccion                    shift and go to state 36
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 3

    (3) block -> instruccion .

    CONSOLE         reduce using rule 3 (block -> instruccion .)
    IF              reduce using rule 3 (block -> instruccion .)
    FOR             reduce using rule 3 (block -> instruccion .)
    SWITCH          reduce using rule 3 (block -> instruccion .)
    WHILE           reduce using rule 3 (block -> instruccion .)
    VAR             reduce using rule 3 (block -> instruccion .)
    CONST           reduce using rule 3 (block -> instruccion .)
    ID              reduce using rule 3 (block -> instruccion .)
    BREAK           reduce using rule 3 (block -> instruccion .)
    CONTINUE        reduce using rule 3 (block -> instruccion .)
    FUNC            reduce using rule 3 (block -> instruccion .)
    RETURN          reduce using rule 3 (block -> instruccion .)
    $end            reduce using rule 3 (block -> instruccion .)
    LLAVEDER        reduce using rule 3 (block -> instruccion .)


state 4

    (4) instruccion -> print .

    CONSOLE         reduce using rule 4 (instruccion -> print .)
    IF              reduce using rule 4 (instruccion -> print .)
    FOR             reduce using rule 4 (instruccion -> print .)
    SWITCH          reduce using rule 4 (instruccion -> print .)
    WHILE           reduce using rule 4 (instruccion -> print .)
    VAR             reduce using rule 4 (instruccion -> print .)
    CONST           reduce using rule 4 (instruccion -> print .)
    ID              reduce using rule 4 (instruccion -> print .)
    BREAK           reduce using rule 4 (instruccion -> print .)
    CONTINUE        reduce using rule 4 (instruccion -> print .)
    FUNC            reduce using rule 4 (instruccion -> print .)
    RETURN          reduce using rule 4 (instruccion -> print .)
    $end            reduce using rule 4 (instruccion -> print .)
    LLAVEDER        reduce using rule 4 (instruccion -> print .)


state 5

    (5) instruccion -> ifinstruction .

    CONSOLE         reduce using rule 5 (instruccion -> ifinstruction .)
    IF              reduce using rule 5 (instruccion -> ifinstruction .)
    FOR             reduce using rule 5 (instruccion -> ifinstruction .)
    SWITCH          reduce using rule 5 (instruccion -> ifinstruction .)
    WHILE           reduce using rule 5 (instruccion -> ifinstruction .)
    VAR             reduce using rule 5 (instruccion -> ifinstruction .)
    CONST           reduce using rule 5 (instruccion -> ifinstruction .)
    ID              reduce using rule 5 (instruccion -> ifinstruction .)
    BREAK           reduce using rule 5 (instruccion -> ifinstruction .)
    CONTINUE        reduce using rule 5 (instruccion -> ifinstruction .)
    FUNC            reduce using rule 5 (instruccion -> ifinstruction .)
    RETURN          reduce using rule 5 (instruccion -> ifinstruction .)
    $end            reduce using rule 5 (instruccion -> ifinstruction .)
    LLAVEDER        reduce using rule 5 (instruccion -> ifinstruction .)


state 6

    (6) instruccion -> forinstruction .

    CONSOLE         reduce using rule 6 (instruccion -> forinstruction .)
    IF              reduce using rule 6 (instruccion -> forinstruction .)
    FOR             reduce using rule 6 (instruccion -> forinstruction .)
    SWITCH          reduce using rule 6 (instruccion -> forinstruction .)
    WHILE           reduce using rule 6 (instruccion -> forinstruction .)
    VAR             reduce using rule 6 (instruccion -> forinstruction .)
    CONST           reduce using rule 6 (instruccion -> forinstruction .)
    ID              reduce using rule 6 (instruccion -> forinstruction .)
    BREAK           reduce using rule 6 (instruccion -> forinstruction .)
    CONTINUE        reduce using rule 6 (instruccion -> forinstruction .)
    FUNC            reduce using rule 6 (instruccion -> forinstruction .)
    RETURN          reduce using rule 6 (instruccion -> forinstruction .)
    $end            reduce using rule 6 (instruccion -> forinstruction .)
    LLAVEDER        reduce using rule 6 (instruccion -> forinstruction .)


state 7

    (7) instruccion -> switchinstruction .

    CONSOLE         reduce using rule 7 (instruccion -> switchinstruction .)
    IF              reduce using rule 7 (instruccion -> switchinstruction .)
    FOR             reduce using rule 7 (instruccion -> switchinstruction .)
    SWITCH          reduce using rule 7 (instruccion -> switchinstruction .)
    WHILE           reduce using rule 7 (instruccion -> switchinstruction .)
    VAR             reduce using rule 7 (instruccion -> switchinstruction .)
    CONST           reduce using rule 7 (instruccion -> switchinstruction .)
    ID              reduce using rule 7 (instruccion -> switchinstruction .)
    BREAK           reduce using rule 7 (instruccion -> switchinstruction .)
    CONTINUE        reduce using rule 7 (instruccion -> switchinstruction .)
    FUNC            reduce using rule 7 (instruccion -> switchinstruction .)
    RETURN          reduce using rule 7 (instruccion -> switchinstruction .)
    $end            reduce using rule 7 (instruccion -> switchinstruction .)
    LLAVEDER        reduce using rule 7 (instruccion -> switchinstruction .)


state 8

    (8) instruccion -> whileinstruction .

    CONSOLE         reduce using rule 8 (instruccion -> whileinstruction .)
    IF              reduce using rule 8 (instruccion -> whileinstruction .)
    FOR             reduce using rule 8 (instruccion -> whileinstruction .)
    SWITCH          reduce using rule 8 (instruccion -> whileinstruction .)
    WHILE           reduce using rule 8 (instruccion -> whileinstruction .)
    VAR             reduce using rule 8 (instruccion -> whileinstruction .)
    CONST           reduce using rule 8 (instruccion -> whileinstruction .)
    ID              reduce using rule 8 (instruccion -> whileinstruction .)
    BREAK           reduce using rule 8 (instruccion -> whileinstruction .)
    CONTINUE        reduce using rule 8 (instruccion -> whileinstruction .)
    FUNC            reduce using rule 8 (instruccion -> whileinstruction .)
    RETURN          reduce using rule 8 (instruccion -> whileinstruction .)
    $end            reduce using rule 8 (instruccion -> whileinstruction .)
    LLAVEDER        reduce using rule 8 (instruccion -> whileinstruction .)


state 9

    (9) instruccion -> declaration .

    CONSOLE         reduce using rule 9 (instruccion -> declaration .)
    IF              reduce using rule 9 (instruccion -> declaration .)
    FOR             reduce using rule 9 (instruccion -> declaration .)
    SWITCH          reduce using rule 9 (instruccion -> declaration .)
    WHILE           reduce using rule 9 (instruccion -> declaration .)
    VAR             reduce using rule 9 (instruccion -> declaration .)
    CONST           reduce using rule 9 (instruccion -> declaration .)
    ID              reduce using rule 9 (instruccion -> declaration .)
    BREAK           reduce using rule 9 (instruccion -> declaration .)
    CONTINUE        reduce using rule 9 (instruccion -> declaration .)
    FUNC            reduce using rule 9 (instruccion -> declaration .)
    RETURN          reduce using rule 9 (instruccion -> declaration .)
    $end            reduce using rule 9 (instruccion -> declaration .)
    LLAVEDER        reduce using rule 9 (instruccion -> declaration .)


state 10

    (10) instruccion -> arraydeclaration .

    CONSOLE         reduce using rule 10 (instruccion -> arraydeclaration .)
    IF              reduce using rule 10 (instruccion -> arraydeclaration .)
    FOR             reduce using rule 10 (instruccion -> arraydeclaration .)
    SWITCH          reduce using rule 10 (instruccion -> arraydeclaration .)
    WHILE           reduce using rule 10 (instruccion -> arraydeclaration .)
    VAR             reduce using rule 10 (instruccion -> arraydeclaration .)
    CONST           reduce using rule 10 (instruccion -> arraydeclaration .)
    ID              reduce using rule 10 (instruccion -> arraydeclaration .)
    BREAK           reduce using rule 10 (instruccion -> arraydeclaration .)
    CONTINUE        reduce using rule 10 (instruccion -> arraydeclaration .)
    FUNC            reduce using rule 10 (instruccion -> arraydeclaration .)
    RETURN          reduce using rule 10 (instruccion -> arraydeclaration .)
    $end            reduce using rule 10 (instruccion -> arraydeclaration .)
    LLAVEDER        reduce using rule 10 (instruccion -> arraydeclaration .)


state 11

    (11) instruccion -> assignment .

    CONSOLE         reduce using rule 11 (instruccion -> assignment .)
    IF              reduce using rule 11 (instruccion -> assignment .)
    FOR             reduce using rule 11 (instruccion -> assignment .)
    SWITCH          reduce using rule 11 (instruccion -> assignment .)
    WHILE           reduce using rule 11 (instruccion -> assignment .)
    VAR             reduce using rule 11 (instruccion -> assignment .)
    CONST           reduce using rule 11 (instruccion -> assignment .)
    ID              reduce using rule 11 (instruccion -> assignment .)
    BREAK           reduce using rule 11 (instruccion -> assignment .)
    CONTINUE        reduce using rule 11 (instruccion -> assignment .)
    FUNC            reduce using rule 11 (instruccion -> assignment .)
    RETURN          reduce using rule 11 (instruccion -> assignment .)
    $end            reduce using rule 11 (instruccion -> assignment .)
    LLAVEDER        reduce using rule 11 (instruccion -> assignment .)


state 12

    (12) instruccion -> assignmentsuma .

    CONSOLE         reduce using rule 12 (instruccion -> assignmentsuma .)
    IF              reduce using rule 12 (instruccion -> assignmentsuma .)
    FOR             reduce using rule 12 (instruccion -> assignmentsuma .)
    SWITCH          reduce using rule 12 (instruccion -> assignmentsuma .)
    WHILE           reduce using rule 12 (instruccion -> assignmentsuma .)
    VAR             reduce using rule 12 (instruccion -> assignmentsuma .)
    CONST           reduce using rule 12 (instruccion -> assignmentsuma .)
    ID              reduce using rule 12 (instruccion -> assignmentsuma .)
    BREAK           reduce using rule 12 (instruccion -> assignmentsuma .)
    CONTINUE        reduce using rule 12 (instruccion -> assignmentsuma .)
    FUNC            reduce using rule 12 (instruccion -> assignmentsuma .)
    RETURN          reduce using rule 12 (instruccion -> assignmentsuma .)
    $end            reduce using rule 12 (instruccion -> assignmentsuma .)
    LLAVEDER        reduce using rule 12 (instruccion -> assignmentsuma .)


state 13

    (13) instruccion -> assignmentresta .

    CONSOLE         reduce using rule 13 (instruccion -> assignmentresta .)
    IF              reduce using rule 13 (instruccion -> assignmentresta .)
    FOR             reduce using rule 13 (instruccion -> assignmentresta .)
    SWITCH          reduce using rule 13 (instruccion -> assignmentresta .)
    WHILE           reduce using rule 13 (instruccion -> assignmentresta .)
    VAR             reduce using rule 13 (instruccion -> assignmentresta .)
    CONST           reduce using rule 13 (instruccion -> assignmentresta .)
    ID              reduce using rule 13 (instruccion -> assignmentresta .)
    BREAK           reduce using rule 13 (instruccion -> assignmentresta .)
    CONTINUE        reduce using rule 13 (instruccion -> assignmentresta .)
    FUNC            reduce using rule 13 (instruccion -> assignmentresta .)
    RETURN          reduce using rule 13 (instruccion -> assignmentresta .)
    $end            reduce using rule 13 (instruccion -> assignmentresta .)
    LLAVEDER        reduce using rule 13 (instruccion -> assignmentresta .)


state 14

    (14) instruccion -> breakstmt .

    CONSOLE         reduce using rule 14 (instruccion -> breakstmt .)
    IF              reduce using rule 14 (instruccion -> breakstmt .)
    FOR             reduce using rule 14 (instruccion -> breakstmt .)
    SWITCH          reduce using rule 14 (instruccion -> breakstmt .)
    WHILE           reduce using rule 14 (instruccion -> breakstmt .)
    VAR             reduce using rule 14 (instruccion -> breakstmt .)
    CONST           reduce using rule 14 (instruccion -> breakstmt .)
    ID              reduce using rule 14 (instruccion -> breakstmt .)
    BREAK           reduce using rule 14 (instruccion -> breakstmt .)
    CONTINUE        reduce using rule 14 (instruccion -> breakstmt .)
    FUNC            reduce using rule 14 (instruccion -> breakstmt .)
    RETURN          reduce using rule 14 (instruccion -> breakstmt .)
    $end            reduce using rule 14 (instruccion -> breakstmt .)
    LLAVEDER        reduce using rule 14 (instruccion -> breakstmt .)


state 15

    (15) instruccion -> continuestmt .

    CONSOLE         reduce using rule 15 (instruccion -> continuestmt .)
    IF              reduce using rule 15 (instruccion -> continuestmt .)
    FOR             reduce using rule 15 (instruccion -> continuestmt .)
    SWITCH          reduce using rule 15 (instruccion -> continuestmt .)
    WHILE           reduce using rule 15 (instruccion -> continuestmt .)
    VAR             reduce using rule 15 (instruccion -> continuestmt .)
    CONST           reduce using rule 15 (instruccion -> continuestmt .)
    ID              reduce using rule 15 (instruccion -> continuestmt .)
    BREAK           reduce using rule 15 (instruccion -> continuestmt .)
    CONTINUE        reduce using rule 15 (instruccion -> continuestmt .)
    FUNC            reduce using rule 15 (instruccion -> continuestmt .)
    RETURN          reduce using rule 15 (instruccion -> continuestmt .)
    $end            reduce using rule 15 (instruccion -> continuestmt .)
    LLAVEDER        reduce using rule 15 (instruccion -> continuestmt .)


state 16

    (16) instruccion -> functionstmt .

    CONSOLE         reduce using rule 16 (instruccion -> functionstmt .)
    IF              reduce using rule 16 (instruccion -> functionstmt .)
    FOR             reduce using rule 16 (instruccion -> functionstmt .)
    SWITCH          reduce using rule 16 (instruccion -> functionstmt .)
    WHILE           reduce using rule 16 (instruccion -> functionstmt .)
    VAR             reduce using rule 16 (instruccion -> functionstmt .)
    CONST           reduce using rule 16 (instruccion -> functionstmt .)
    ID              reduce using rule 16 (instruccion -> functionstmt .)
    BREAK           reduce using rule 16 (instruccion -> functionstmt .)
    CONTINUE        reduce using rule 16 (instruccion -> functionstmt .)
    FUNC            reduce using rule 16 (instruccion -> functionstmt .)
    RETURN          reduce using rule 16 (instruccion -> functionstmt .)
    $end            reduce using rule 16 (instruccion -> functionstmt .)
    LLAVEDER        reduce using rule 16 (instruccion -> functionstmt .)


state 17

    (17) instruccion -> call .

    CONSOLE         reduce using rule 17 (instruccion -> call .)
    IF              reduce using rule 17 (instruccion -> call .)
    FOR             reduce using rule 17 (instruccion -> call .)
    SWITCH          reduce using rule 17 (instruccion -> call .)
    WHILE           reduce using rule 17 (instruccion -> call .)
    VAR             reduce using rule 17 (instruccion -> call .)
    CONST           reduce using rule 17 (instruccion -> call .)
    ID              reduce using rule 17 (instruccion -> call .)
    BREAK           reduce using rule 17 (instruccion -> call .)
    CONTINUE        reduce using rule 17 (instruccion -> call .)
    FUNC            reduce using rule 17 (instruccion -> call .)
    RETURN          reduce using rule 17 (instruccion -> call .)
    $end            reduce using rule 17 (instruccion -> call .)
    LLAVEDER        reduce using rule 17 (instruccion -> call .)


state 18

    (18) instruccion -> returnstmt .

    CONSOLE         reduce using rule 18 (instruccion -> returnstmt .)
    IF              reduce using rule 18 (instruccion -> returnstmt .)
    FOR             reduce using rule 18 (instruccion -> returnstmt .)
    SWITCH          reduce using rule 18 (instruccion -> returnstmt .)
    WHILE           reduce using rule 18 (instruccion -> returnstmt .)
    VAR             reduce using rule 18 (instruccion -> returnstmt .)
    CONST           reduce using rule 18 (instruccion -> returnstmt .)
    ID              reduce using rule 18 (instruccion -> returnstmt .)
    BREAK           reduce using rule 18 (instruccion -> returnstmt .)
    CONTINUE        reduce using rule 18 (instruccion -> returnstmt .)
    FUNC            reduce using rule 18 (instruccion -> returnstmt .)
    RETURN          reduce using rule 18 (instruccion -> returnstmt .)
    $end            reduce using rule 18 (instruccion -> returnstmt .)
    LLAVEDER        reduce using rule 18 (instruccion -> returnstmt .)


state 19

    (19) instruccion -> toLowerinstruction .

    CONSOLE         reduce using rule 19 (instruccion -> toLowerinstruction .)
    IF              reduce using rule 19 (instruccion -> toLowerinstruction .)
    FOR             reduce using rule 19 (instruccion -> toLowerinstruction .)
    SWITCH          reduce using rule 19 (instruccion -> toLowerinstruction .)
    WHILE           reduce using rule 19 (instruccion -> toLowerinstruction .)
    VAR             reduce using rule 19 (instruccion -> toLowerinstruction .)
    CONST           reduce using rule 19 (instruccion -> toLowerinstruction .)
    ID              reduce using rule 19 (instruccion -> toLowerinstruction .)
    BREAK           reduce using rule 19 (instruccion -> toLowerinstruction .)
    CONTINUE        reduce using rule 19 (instruccion -> toLowerinstruction .)
    FUNC            reduce using rule 19 (instruccion -> toLowerinstruction .)
    RETURN          reduce using rule 19 (instruccion -> toLowerinstruction .)
    $end            reduce using rule 19 (instruccion -> toLowerinstruction .)
    LLAVEDER        reduce using rule 19 (instruccion -> toLowerinstruction .)


state 20

    (20) instruccion -> toUpperinstruction .

    CONSOLE         reduce using rule 20 (instruccion -> toUpperinstruction .)
    IF              reduce using rule 20 (instruccion -> toUpperinstruction .)
    FOR             reduce using rule 20 (instruccion -> toUpperinstruction .)
    SWITCH          reduce using rule 20 (instruccion -> toUpperinstruction .)
    WHILE           reduce using rule 20 (instruccion -> toUpperinstruction .)
    VAR             reduce using rule 20 (instruccion -> toUpperinstruction .)
    CONST           reduce using rule 20 (instruccion -> toUpperinstruction .)
    ID              reduce using rule 20 (instruccion -> toUpperinstruction .)
    BREAK           reduce using rule 20 (instruccion -> toUpperinstruction .)
    CONTINUE        reduce using rule 20 (instruccion -> toUpperinstruction .)
    FUNC            reduce using rule 20 (instruccion -> toUpperinstruction .)
    RETURN          reduce using rule 20 (instruccion -> toUpperinstruction .)
    $end            reduce using rule 20 (instruccion -> toUpperinstruction .)
    LLAVEDER        reduce using rule 20 (instruccion -> toUpperinstruction .)


state 21

    (21) instruccion -> parseintinstruction .

    CONSOLE         reduce using rule 21 (instruccion -> parseintinstruction .)
    IF              reduce using rule 21 (instruccion -> parseintinstruction .)
    FOR             reduce using rule 21 (instruccion -> parseintinstruction .)
    SWITCH          reduce using rule 21 (instruccion -> parseintinstruction .)
    WHILE           reduce using rule 21 (instruccion -> parseintinstruction .)
    VAR             reduce using rule 21 (instruccion -> parseintinstruction .)
    CONST           reduce using rule 21 (instruccion -> parseintinstruction .)
    ID              reduce using rule 21 (instruccion -> parseintinstruction .)
    BREAK           reduce using rule 21 (instruccion -> parseintinstruction .)
    CONTINUE        reduce using rule 21 (instruccion -> parseintinstruction .)
    FUNC            reduce using rule 21 (instruccion -> parseintinstruction .)
    RETURN          reduce using rule 21 (instruccion -> parseintinstruction .)
    $end            reduce using rule 21 (instruccion -> parseintinstruction .)
    LLAVEDER        reduce using rule 21 (instruccion -> parseintinstruction .)


state 22

    (22) instruccion -> parsefloatinstruction .

    CONSOLE         reduce using rule 22 (instruccion -> parsefloatinstruction .)
    IF              reduce using rule 22 (instruccion -> parsefloatinstruction .)
    FOR             reduce using rule 22 (instruccion -> parsefloatinstruction .)
    SWITCH          reduce using rule 22 (instruccion -> parsefloatinstruction .)
    WHILE           reduce using rule 22 (instruccion -> parsefloatinstruction .)
    VAR             reduce using rule 22 (instruccion -> parsefloatinstruction .)
    CONST           reduce using rule 22 (instruccion -> parsefloatinstruction .)
    ID              reduce using rule 22 (instruccion -> parsefloatinstruction .)
    BREAK           reduce using rule 22 (instruccion -> parsefloatinstruction .)
    CONTINUE        reduce using rule 22 (instruccion -> parsefloatinstruction .)
    FUNC            reduce using rule 22 (instruccion -> parsefloatinstruction .)
    RETURN          reduce using rule 22 (instruccion -> parsefloatinstruction .)
    $end            reduce using rule 22 (instruccion -> parsefloatinstruction .)
    LLAVEDER        reduce using rule 22 (instruccion -> parsefloatinstruction .)


state 23

    (23) instruccion -> pushinstruction .

    CONSOLE         reduce using rule 23 (instruccion -> pushinstruction .)
    IF              reduce using rule 23 (instruccion -> pushinstruction .)
    FOR             reduce using rule 23 (instruccion -> pushinstruction .)
    SWITCH          reduce using rule 23 (instruccion -> pushinstruction .)
    WHILE           reduce using rule 23 (instruccion -> pushinstruction .)
    VAR             reduce using rule 23 (instruccion -> pushinstruction .)
    CONST           reduce using rule 23 (instruccion -> pushinstruction .)
    ID              reduce using rule 23 (instruccion -> pushinstruction .)
    BREAK           reduce using rule 23 (instruccion -> pushinstruction .)
    CONTINUE        reduce using rule 23 (instruccion -> pushinstruction .)
    FUNC            reduce using rule 23 (instruccion -> pushinstruction .)
    RETURN          reduce using rule 23 (instruccion -> pushinstruction .)
    $end            reduce using rule 23 (instruccion -> pushinstruction .)
    LLAVEDER        reduce using rule 23 (instruccion -> pushinstruction .)


state 24

    (24) print -> CONSOLE . PUNTO LOG PARIZQ expressionList PARDER PYC

    PUNTO           shift and go to state 37


state 25

    (25) ifinstruction -> IF . PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> IF . PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> IF . PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block

    PARIZQ          shift and go to state 38


state 26

    (28) forinstruction -> FOR . PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER

    PARIZQ          shift and go to state 39


state 27

    (31) switchinstruction -> SWITCH . PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER

    PARIZQ          shift and go to state 40


state 28

    (37) whileinstruction -> WHILE . PARIZQ expression PARDER LLAVEIZQ block LLAVEDER

    PARIZQ          shift and go to state 41


state 29

    (38) declaration -> VAR . ID DOSPTS type IG expression PYC
    (39) declaration -> VAR . ID IG expression PYC
    (42) arraydeclaration -> VAR . ID DOSPTS type CORIZQ CORDER IG expression PYC

    ID              shift and go to state 42


state 30

    (43) assignment -> ID . IG expression PYC
    (44) assignmentsuma -> ID . MAS IG expression PYC
    (45) assignmentresta -> ID . MENOS IG expression PYC
    (48) call -> ID . PARIZQ expressionList PARDER PYC
    (49) call -> ID . PARIZQ PARDER PYC
    (65) pushinstruction -> ID . PUNTO PUSH PARIZQ expression PARDER PYC

    IG              shift and go to state 43
    MAS             shift and go to state 44
    MENOS           shift and go to state 45
    PARIZQ          shift and go to state 46
    PUNTO           shift and go to state 47


state 31

    (40) declaration -> CONST . ID DOSPTS type IG expression PYC
    (41) declaration -> CONST . ID IG expression PYC
    (61) toLowerinstruction -> CONST . ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> CONST . ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> CONST . ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> CONST . ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC

    ID              shift and go to state 48


state 32

    (59) breakstmt -> BREAK . PYC

    PYC             shift and go to state 49


state 33

    (60) continuestmt -> CONTINUE . PYC

    PYC             shift and go to state 50


state 34

    (50) functionstmt -> FUNC . ID funcparams functype LLAVEIZQ block LLAVEDER

    ID              shift and go to state 51


state 35

    (46) returnstmt -> RETURN . expression PYC
    (47) returnstmt -> RETURN . PYC
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    PYC             shift and go to state 53
    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 52
    listArray                      shift and go to state 61

state 36

    (2) block -> block instruccion .

    CONSOLE         reduce using rule 2 (block -> block instruccion .)
    IF              reduce using rule 2 (block -> block instruccion .)
    FOR             reduce using rule 2 (block -> block instruccion .)
    SWITCH          reduce using rule 2 (block -> block instruccion .)
    WHILE           reduce using rule 2 (block -> block instruccion .)
    VAR             reduce using rule 2 (block -> block instruccion .)
    CONST           reduce using rule 2 (block -> block instruccion .)
    ID              reduce using rule 2 (block -> block instruccion .)
    BREAK           reduce using rule 2 (block -> block instruccion .)
    CONTINUE        reduce using rule 2 (block -> block instruccion .)
    FUNC            reduce using rule 2 (block -> block instruccion .)
    RETURN          reduce using rule 2 (block -> block instruccion .)
    $end            reduce using rule 2 (block -> block instruccion .)
    LLAVEDER        reduce using rule 2 (block -> block instruccion .)


state 37

    (24) print -> CONSOLE PUNTO . LOG PARIZQ expressionList PARDER PYC

    LOG             shift and go to state 65


state 38

    (25) ifinstruction -> IF PARIZQ . expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> IF PARIZQ . expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> IF PARIZQ . expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 66
    listArray                      shift and go to state 61

state 39

    (28) forinstruction -> FOR PARIZQ . declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC

    VAR             shift and go to state 68
    CONST           shift and go to state 69

    declaration                    shift and go to state 67

state 40

    (31) switchinstruction -> SWITCH PARIZQ . expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 70
    listArray                      shift and go to state 61

state 41

    (37) whileinstruction -> WHILE PARIZQ . expression PARDER LLAVEIZQ block LLAVEDER
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 71
    listArray                      shift and go to state 61

state 42

    (38) declaration -> VAR ID . DOSPTS type IG expression PYC
    (39) declaration -> VAR ID . IG expression PYC
    (42) arraydeclaration -> VAR ID . DOSPTS type CORIZQ CORDER IG expression PYC

    DOSPTS          shift and go to state 72
    IG              shift and go to state 73


state 43

    (43) assignment -> ID IG . expression PYC
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 74
    listArray                      shift and go to state 61

state 44

    (44) assignmentsuma -> ID MAS . IG expression PYC

    IG              shift and go to state 75


state 45

    (45) assignmentresta -> ID MENOS . IG expression PYC

    IG              shift and go to state 76


state 46

    (48) call -> ID PARIZQ . expressionList PARDER PYC
    (49) call -> ID PARIZQ . PARDER PYC
    (71) expressionList -> . expressionList COMA expression
    (72) expressionList -> . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    PARDER          shift and go to state 78
    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expressionList                 shift and go to state 77
    expression                     shift and go to state 79
    listArray                      shift and go to state 61

state 47

    (65) pushinstruction -> ID PUNTO . PUSH PARIZQ expression PARDER PYC

    PUSH            shift and go to state 80


state 48

    (40) declaration -> CONST ID . DOSPTS type IG expression PYC
    (41) declaration -> CONST ID . IG expression PYC
    (61) toLowerinstruction -> CONST ID . DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> CONST ID . DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> CONST ID . DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> CONST ID . DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC

    DOSPTS          shift and go to state 81
    IG              shift and go to state 82


state 49

    (59) breakstmt -> BREAK PYC .

    CONSOLE         reduce using rule 59 (breakstmt -> BREAK PYC .)
    IF              reduce using rule 59 (breakstmt -> BREAK PYC .)
    FOR             reduce using rule 59 (breakstmt -> BREAK PYC .)
    SWITCH          reduce using rule 59 (breakstmt -> BREAK PYC .)
    WHILE           reduce using rule 59 (breakstmt -> BREAK PYC .)
    VAR             reduce using rule 59 (breakstmt -> BREAK PYC .)
    CONST           reduce using rule 59 (breakstmt -> BREAK PYC .)
    ID              reduce using rule 59 (breakstmt -> BREAK PYC .)
    BREAK           reduce using rule 59 (breakstmt -> BREAK PYC .)
    CONTINUE        reduce using rule 59 (breakstmt -> BREAK PYC .)
    FUNC            reduce using rule 59 (breakstmt -> BREAK PYC .)
    RETURN          reduce using rule 59 (breakstmt -> BREAK PYC .)
    $end            reduce using rule 59 (breakstmt -> BREAK PYC .)
    LLAVEDER        reduce using rule 59 (breakstmt -> BREAK PYC .)


state 50

    (60) continuestmt -> CONTINUE PYC .

    CONSOLE         reduce using rule 60 (continuestmt -> CONTINUE PYC .)
    IF              reduce using rule 60 (continuestmt -> CONTINUE PYC .)
    FOR             reduce using rule 60 (continuestmt -> CONTINUE PYC .)
    SWITCH          reduce using rule 60 (continuestmt -> CONTINUE PYC .)
    WHILE           reduce using rule 60 (continuestmt -> CONTINUE PYC .)
    VAR             reduce using rule 60 (continuestmt -> CONTINUE PYC .)
    CONST           reduce using rule 60 (continuestmt -> CONTINUE PYC .)
    ID              reduce using rule 60 (continuestmt -> CONTINUE PYC .)
    BREAK           reduce using rule 60 (continuestmt -> CONTINUE PYC .)
    CONTINUE        reduce using rule 60 (continuestmt -> CONTINUE PYC .)
    FUNC            reduce using rule 60 (continuestmt -> CONTINUE PYC .)
    RETURN          reduce using rule 60 (continuestmt -> CONTINUE PYC .)
    $end            reduce using rule 60 (continuestmt -> CONTINUE PYC .)
    LLAVEDER        reduce using rule 60 (continuestmt -> CONTINUE PYC .)


state 51

    (50) functionstmt -> FUNC ID . funcparams functype LLAVEIZQ block LLAVEDER
    (51) funcparams -> . PARIZQ paramsList PARDER
    (52) funcparams -> . PARIZQ PARDER

    PARIZQ          shift and go to state 84

    funcparams                     shift and go to state 83

state 52

    (46) returnstmt -> RETURN expression . PYC
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             shift and go to state 85
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 53

    (47) returnstmt -> RETURN PYC .

    CONSOLE         reduce using rule 47 (returnstmt -> RETURN PYC .)
    IF              reduce using rule 47 (returnstmt -> RETURN PYC .)
    FOR             reduce using rule 47 (returnstmt -> RETURN PYC .)
    SWITCH          reduce using rule 47 (returnstmt -> RETURN PYC .)
    WHILE           reduce using rule 47 (returnstmt -> RETURN PYC .)
    VAR             reduce using rule 47 (returnstmt -> RETURN PYC .)
    CONST           reduce using rule 47 (returnstmt -> RETURN PYC .)
    ID              reduce using rule 47 (returnstmt -> RETURN PYC .)
    BREAK           reduce using rule 47 (returnstmt -> RETURN PYC .)
    CONTINUE        reduce using rule 47 (returnstmt -> RETURN PYC .)
    FUNC            reduce using rule 47 (returnstmt -> RETURN PYC .)
    RETURN          reduce using rule 47 (returnstmt -> RETURN PYC .)
    $end            reduce using rule 47 (returnstmt -> RETURN PYC .)
    LLAVEDER        reduce using rule 47 (returnstmt -> RETURN PYC .)


state 54

    (86) expression -> NOT . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 100
    listArray                      shift and go to state 61

state 55

    (87) expression -> PARIZQ . expression PARDER
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 101
    listArray                      shift and go to state 61

state 56

    (89) expression -> ENTERO .

    PYC             reduce using rule 89 (expression -> ENTERO .)
    MAS             reduce using rule 89 (expression -> ENTERO .)
    MENOS           reduce using rule 89 (expression -> ENTERO .)
    POR             reduce using rule 89 (expression -> ENTERO .)
    DIVIDIDO        reduce using rule 89 (expression -> ENTERO .)
    MODULO          reduce using rule 89 (expression -> ENTERO .)
    MAYOR           reduce using rule 89 (expression -> ENTERO .)
    MENOR           reduce using rule 89 (expression -> ENTERO .)
    MAYORIG         reduce using rule 89 (expression -> ENTERO .)
    MENORIG         reduce using rule 89 (expression -> ENTERO .)
    IGIG            reduce using rule 89 (expression -> ENTERO .)
    DIF             reduce using rule 89 (expression -> ENTERO .)
    AND             reduce using rule 89 (expression -> ENTERO .)
    OR              reduce using rule 89 (expression -> ENTERO .)
    TERN            reduce using rule 89 (expression -> ENTERO .)
    PARDER          reduce using rule 89 (expression -> ENTERO .)
    COMA            reduce using rule 89 (expression -> ENTERO .)
    CORDER          reduce using rule 89 (expression -> ENTERO .)
    DOSPTS          reduce using rule 89 (expression -> ENTERO .)


state 57

    (90) expression -> DECIMAL .

    PYC             reduce using rule 90 (expression -> DECIMAL .)
    MAS             reduce using rule 90 (expression -> DECIMAL .)
    MENOS           reduce using rule 90 (expression -> DECIMAL .)
    POR             reduce using rule 90 (expression -> DECIMAL .)
    DIVIDIDO        reduce using rule 90 (expression -> DECIMAL .)
    MODULO          reduce using rule 90 (expression -> DECIMAL .)
    MAYOR           reduce using rule 90 (expression -> DECIMAL .)
    MENOR           reduce using rule 90 (expression -> DECIMAL .)
    MAYORIG         reduce using rule 90 (expression -> DECIMAL .)
    MENORIG         reduce using rule 90 (expression -> DECIMAL .)
    IGIG            reduce using rule 90 (expression -> DECIMAL .)
    DIF             reduce using rule 90 (expression -> DECIMAL .)
    AND             reduce using rule 90 (expression -> DECIMAL .)
    OR              reduce using rule 90 (expression -> DECIMAL .)
    TERN            reduce using rule 90 (expression -> DECIMAL .)
    PARDER          reduce using rule 90 (expression -> DECIMAL .)
    COMA            reduce using rule 90 (expression -> DECIMAL .)
    CORDER          reduce using rule 90 (expression -> DECIMAL .)
    DOSPTS          reduce using rule 90 (expression -> DECIMAL .)


state 58

    (91) expression -> BOOLEANO .

    PYC             reduce using rule 91 (expression -> BOOLEANO .)
    MAS             reduce using rule 91 (expression -> BOOLEANO .)
    MENOS           reduce using rule 91 (expression -> BOOLEANO .)
    POR             reduce using rule 91 (expression -> BOOLEANO .)
    DIVIDIDO        reduce using rule 91 (expression -> BOOLEANO .)
    MODULO          reduce using rule 91 (expression -> BOOLEANO .)
    MAYOR           reduce using rule 91 (expression -> BOOLEANO .)
    MENOR           reduce using rule 91 (expression -> BOOLEANO .)
    MAYORIG         reduce using rule 91 (expression -> BOOLEANO .)
    MENORIG         reduce using rule 91 (expression -> BOOLEANO .)
    IGIG            reduce using rule 91 (expression -> BOOLEANO .)
    DIF             reduce using rule 91 (expression -> BOOLEANO .)
    AND             reduce using rule 91 (expression -> BOOLEANO .)
    OR              reduce using rule 91 (expression -> BOOLEANO .)
    TERN            reduce using rule 91 (expression -> BOOLEANO .)
    PARDER          reduce using rule 91 (expression -> BOOLEANO .)
    COMA            reduce using rule 91 (expression -> BOOLEANO .)
    CORDER          reduce using rule 91 (expression -> BOOLEANO .)
    DOSPTS          reduce using rule 91 (expression -> BOOLEANO .)


state 59

    (92) expression -> CADENA .

    PYC             reduce using rule 92 (expression -> CADENA .)
    MAS             reduce using rule 92 (expression -> CADENA .)
    MENOS           reduce using rule 92 (expression -> CADENA .)
    POR             reduce using rule 92 (expression -> CADENA .)
    DIVIDIDO        reduce using rule 92 (expression -> CADENA .)
    MODULO          reduce using rule 92 (expression -> CADENA .)
    MAYOR           reduce using rule 92 (expression -> CADENA .)
    MENOR           reduce using rule 92 (expression -> CADENA .)
    MAYORIG         reduce using rule 92 (expression -> CADENA .)
    MENORIG         reduce using rule 92 (expression -> CADENA .)
    IGIG            reduce using rule 92 (expression -> CADENA .)
    DIF             reduce using rule 92 (expression -> CADENA .)
    AND             reduce using rule 92 (expression -> CADENA .)
    OR              reduce using rule 92 (expression -> CADENA .)
    TERN            reduce using rule 92 (expression -> CADENA .)
    PARDER          reduce using rule 92 (expression -> CADENA .)
    COMA            reduce using rule 92 (expression -> CADENA .)
    CORDER          reduce using rule 92 (expression -> CADENA .)
    DOSPTS          reduce using rule 92 (expression -> CADENA .)


state 60

    (93) expression -> CARACTER .

    PYC             reduce using rule 93 (expression -> CARACTER .)
    MAS             reduce using rule 93 (expression -> CARACTER .)
    MENOS           reduce using rule 93 (expression -> CARACTER .)
    POR             reduce using rule 93 (expression -> CARACTER .)
    DIVIDIDO        reduce using rule 93 (expression -> CARACTER .)
    MODULO          reduce using rule 93 (expression -> CARACTER .)
    MAYOR           reduce using rule 93 (expression -> CARACTER .)
    MENOR           reduce using rule 93 (expression -> CARACTER .)
    MAYORIG         reduce using rule 93 (expression -> CARACTER .)
    MENORIG         reduce using rule 93 (expression -> CARACTER .)
    IGIG            reduce using rule 93 (expression -> CARACTER .)
    DIF             reduce using rule 93 (expression -> CARACTER .)
    AND             reduce using rule 93 (expression -> CARACTER .)
    OR              reduce using rule 93 (expression -> CARACTER .)
    TERN            reduce using rule 93 (expression -> CARACTER .)
    PARDER          reduce using rule 93 (expression -> CARACTER .)
    COMA            reduce using rule 93 (expression -> CARACTER .)
    CORDER          reduce using rule 93 (expression -> CARACTER .)
    DOSPTS          reduce using rule 93 (expression -> CARACTER .)


state 61

    (94) expression -> listArray .
    (98) listArray -> listArray . PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> listArray . PUNTO POP PARIZQ PARDER
    (100) listArray -> listArray . PUNTO JOIN PARIZQ PARDER
    (101) listArray -> listArray . PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> listArray . CORIZQ expression CORDER
    (103) listArray -> listArray . PUNTO LENGTH
    (104) listArray -> listArray . PUNTO ID

    PYC             reduce using rule 94 (expression -> listArray .)
    MAS             reduce using rule 94 (expression -> listArray .)
    MENOS           reduce using rule 94 (expression -> listArray .)
    POR             reduce using rule 94 (expression -> listArray .)
    DIVIDIDO        reduce using rule 94 (expression -> listArray .)
    MODULO          reduce using rule 94 (expression -> listArray .)
    MAYOR           reduce using rule 94 (expression -> listArray .)
    MENOR           reduce using rule 94 (expression -> listArray .)
    MAYORIG         reduce using rule 94 (expression -> listArray .)
    MENORIG         reduce using rule 94 (expression -> listArray .)
    IGIG            reduce using rule 94 (expression -> listArray .)
    DIF             reduce using rule 94 (expression -> listArray .)
    AND             reduce using rule 94 (expression -> listArray .)
    OR              reduce using rule 94 (expression -> listArray .)
    TERN            reduce using rule 94 (expression -> listArray .)
    PARDER          reduce using rule 94 (expression -> listArray .)
    COMA            reduce using rule 94 (expression -> listArray .)
    CORDER          reduce using rule 94 (expression -> listArray .)
    DOSPTS          reduce using rule 94 (expression -> listArray .)
    PUNTO           shift and go to state 102
    CORIZQ          shift and go to state 103


state 62

    (95) expression -> CORIZQ . expressionList CORDER
    (71) expressionList -> . expressionList COMA expression
    (72) expressionList -> . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expressionList                 shift and go to state 104
    expression                     shift and go to state 79
    listArray                      shift and go to state 61

state 63

    (96) expression -> ID . PARIZQ expressionList PARDER
    (97) expression -> ID . PARIZQ PARDER
    (105) listArray -> ID .

    PARIZQ          shift and go to state 105
    PUNTO           reduce using rule 105 (listArray -> ID .)
    CORIZQ          reduce using rule 105 (listArray -> ID .)
    PYC             reduce using rule 105 (listArray -> ID .)
    MAS             reduce using rule 105 (listArray -> ID .)
    MENOS           reduce using rule 105 (listArray -> ID .)
    POR             reduce using rule 105 (listArray -> ID .)
    DIVIDIDO        reduce using rule 105 (listArray -> ID .)
    MODULO          reduce using rule 105 (listArray -> ID .)
    MAYOR           reduce using rule 105 (listArray -> ID .)
    MENOR           reduce using rule 105 (listArray -> ID .)
    MAYORIG         reduce using rule 105 (listArray -> ID .)
    MENORIG         reduce using rule 105 (listArray -> ID .)
    IGIG            reduce using rule 105 (listArray -> ID .)
    DIF             reduce using rule 105 (listArray -> ID .)
    AND             reduce using rule 105 (listArray -> ID .)
    OR              reduce using rule 105 (listArray -> ID .)
    TERN            reduce using rule 105 (listArray -> ID .)
    PARDER          reduce using rule 105 (listArray -> ID .)
    COMA            reduce using rule 105 (listArray -> ID .)
    CORDER          reduce using rule 105 (listArray -> ID .)
    DOSPTS          reduce using rule 105 (listArray -> ID .)


state 64

    (106) expression -> TYPEOF . ID

    ID              shift and go to state 106


state 65

    (24) print -> CONSOLE PUNTO LOG . PARIZQ expressionList PARDER PYC

    PARIZQ          shift and go to state 107


state 66

    (25) ifinstruction -> IF PARIZQ expression . PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> IF PARIZQ expression . PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> IF PARIZQ expression . PARDER LLAVEIZQ block LLAVEDER ELSE block
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PARDER          shift and go to state 108
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 67

    (28) forinstruction -> FOR PARIZQ declaration . expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 109
    listArray                      shift and go to state 61

state 68

    (38) declaration -> VAR . ID DOSPTS type IG expression PYC
    (39) declaration -> VAR . ID IG expression PYC

    ID              shift and go to state 110


state 69

    (40) declaration -> CONST . ID DOSPTS type IG expression PYC
    (41) declaration -> CONST . ID IG expression PYC

    ID              shift and go to state 111


state 70

    (31) switchinstruction -> SWITCH PARIZQ expression . PARDER LLAVEIZQ caseinstruction LLAVEDER
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PARDER          shift and go to state 112
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 71

    (37) whileinstruction -> WHILE PARIZQ expression . PARDER LLAVEIZQ block LLAVEDER
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PARDER          shift and go to state 113
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 72

    (38) declaration -> VAR ID DOSPTS . type IG expression PYC
    (42) arraydeclaration -> VAR ID DOSPTS . type CORIZQ CORDER IG expression PYC
    (66) type -> . NUMBER
    (67) type -> . FLOAT
    (68) type -> . STRING
    (69) type -> . CHAR
    (70) type -> . BOOL

    NUMBER          shift and go to state 115
    FLOAT           shift and go to state 116
    STRING          shift and go to state 117
    CHAR            shift and go to state 118
    BOOL            shift and go to state 119

    type                           shift and go to state 114

state 73

    (39) declaration -> VAR ID IG . expression PYC
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 120
    listArray                      shift and go to state 61

state 74

    (43) assignment -> ID IG expression . PYC
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             shift and go to state 121
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 75

    (44) assignmentsuma -> ID MAS IG . expression PYC
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 122
    listArray                      shift and go to state 61

state 76

    (45) assignmentresta -> ID MENOS IG . expression PYC
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 123
    listArray                      shift and go to state 61

state 77

    (48) call -> ID PARIZQ expressionList . PARDER PYC
    (71) expressionList -> expressionList . COMA expression

    PARDER          shift and go to state 124
    COMA            shift and go to state 125


state 78

    (49) call -> ID PARIZQ PARDER . PYC

    PYC             shift and go to state 126


state 79

    (72) expressionList -> expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PARDER          reduce using rule 72 (expressionList -> expression .)
    COMA            reduce using rule 72 (expressionList -> expression .)
    CORDER          reduce using rule 72 (expressionList -> expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 80

    (65) pushinstruction -> ID PUNTO PUSH . PARIZQ expression PARDER PYC

    PARIZQ          shift and go to state 127


state 81

    (40) declaration -> CONST ID DOSPTS . type IG expression PYC
    (61) toLowerinstruction -> CONST ID DOSPTS . type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> CONST ID DOSPTS . type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> CONST ID DOSPTS . type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> CONST ID DOSPTS . type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (66) type -> . NUMBER
    (67) type -> . FLOAT
    (68) type -> . STRING
    (69) type -> . CHAR
    (70) type -> . BOOL

    NUMBER          shift and go to state 115
    FLOAT           shift and go to state 116
    STRING          shift and go to state 117
    CHAR            shift and go to state 118
    BOOL            shift and go to state 119

    type                           shift and go to state 128

state 82

    (41) declaration -> CONST ID IG . expression PYC
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 129
    listArray                      shift and go to state 61

state 83

    (50) functionstmt -> FUNC ID funcparams . functype LLAVEIZQ block LLAVEDER
    (57) functype -> . DOSPTS type
    (58) functype -> .

    DOSPTS          shift and go to state 131
    LLAVEIZQ        reduce using rule 58 (functype -> .)

    functype                       shift and go to state 130

state 84

    (51) funcparams -> PARIZQ . paramsList PARDER
    (52) funcparams -> PARIZQ . PARDER
    (53) paramsList -> . paramsList COMA ID DOSPTS type
    (54) paramsList -> . ID DOSPTS type
    (55) paramsList -> . paramsList ID DOSPTS type CORIZQ CORDER
    (56) paramsList -> . ID DOSPTS type CORIZQ CORDER

    PARDER          shift and go to state 133
    ID              shift and go to state 134

    paramsList                     shift and go to state 132

state 85

    (46) returnstmt -> RETURN expression PYC .

    CONSOLE         reduce using rule 46 (returnstmt -> RETURN expression PYC .)
    IF              reduce using rule 46 (returnstmt -> RETURN expression PYC .)
    FOR             reduce using rule 46 (returnstmt -> RETURN expression PYC .)
    SWITCH          reduce using rule 46 (returnstmt -> RETURN expression PYC .)
    WHILE           reduce using rule 46 (returnstmt -> RETURN expression PYC .)
    VAR             reduce using rule 46 (returnstmt -> RETURN expression PYC .)
    CONST           reduce using rule 46 (returnstmt -> RETURN expression PYC .)
    ID              reduce using rule 46 (returnstmt -> RETURN expression PYC .)
    BREAK           reduce using rule 46 (returnstmt -> RETURN expression PYC .)
    CONTINUE        reduce using rule 46 (returnstmt -> RETURN expression PYC .)
    FUNC            reduce using rule 46 (returnstmt -> RETURN expression PYC .)
    RETURN          reduce using rule 46 (returnstmt -> RETURN expression PYC .)
    $end            reduce using rule 46 (returnstmt -> RETURN expression PYC .)
    LLAVEDER        reduce using rule 46 (returnstmt -> RETURN expression PYC .)


state 86

    (73) expression -> expression MAS . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 135
    listArray                      shift and go to state 61

state 87

    (74) expression -> expression MENOS . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 136
    listArray                      shift and go to state 61

state 88

    (75) expression -> expression POR . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 137
    listArray                      shift and go to state 61

state 89

    (76) expression -> expression DIVIDIDO . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 138
    listArray                      shift and go to state 61

state 90

    (77) expression -> expression MODULO . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 139
    listArray                      shift and go to state 61

state 91

    (78) expression -> expression MAYOR . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 140
    listArray                      shift and go to state 61

state 92

    (79) expression -> expression MENOR . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 141
    listArray                      shift and go to state 61

state 93

    (80) expression -> expression MAYORIG . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 142
    listArray                      shift and go to state 61

state 94

    (81) expression -> expression MENORIG . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 143
    listArray                      shift and go to state 61

state 95

    (82) expression -> expression IGIG . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 144
    listArray                      shift and go to state 61

state 96

    (83) expression -> expression DIF . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 145
    listArray                      shift and go to state 61

state 97

    (84) expression -> expression AND . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 146
    listArray                      shift and go to state 61

state 98

    (85) expression -> expression OR . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 147
    listArray                      shift and go to state 61

state 99

    (88) expression -> expression TERN . expression DOSPTS expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 148
    listArray                      shift and go to state 61

state 100

    (86) expression -> NOT expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for IGIG resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for TERN resolved as shift
    PYC             reduce using rule 86 (expression -> NOT expression .)
    PARDER          reduce using rule 86 (expression -> NOT expression .)
    COMA            reduce using rule 86 (expression -> NOT expression .)
    CORDER          reduce using rule 86 (expression -> NOT expression .)
    DOSPTS          reduce using rule 86 (expression -> NOT expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99

  ! MAS             [ reduce using rule 86 (expression -> NOT expression .) ]
  ! MENOS           [ reduce using rule 86 (expression -> NOT expression .) ]
  ! POR             [ reduce using rule 86 (expression -> NOT expression .) ]
  ! DIVIDIDO        [ reduce using rule 86 (expression -> NOT expression .) ]
  ! MODULO          [ reduce using rule 86 (expression -> NOT expression .) ]
  ! MAYOR           [ reduce using rule 86 (expression -> NOT expression .) ]
  ! MENOR           [ reduce using rule 86 (expression -> NOT expression .) ]
  ! MAYORIG         [ reduce using rule 86 (expression -> NOT expression .) ]
  ! MENORIG         [ reduce using rule 86 (expression -> NOT expression .) ]
  ! IGIG            [ reduce using rule 86 (expression -> NOT expression .) ]
  ! DIF             [ reduce using rule 86 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 86 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 86 (expression -> NOT expression .) ]
  ! TERN            [ reduce using rule 86 (expression -> NOT expression .) ]


state 101

    (87) expression -> PARIZQ expression . PARDER
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PARDER          shift and go to state 149
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 102

    (98) listArray -> listArray PUNTO . INDEXOF PARIZQ expression PARDER
    (99) listArray -> listArray PUNTO . POP PARIZQ PARDER
    (100) listArray -> listArray PUNTO . JOIN PARIZQ PARDER
    (101) listArray -> listArray PUNTO . TOSTRING PARIZQ PARDER
    (103) listArray -> listArray PUNTO . LENGTH
    (104) listArray -> listArray PUNTO . ID

    INDEXOF         shift and go to state 150
    POP             shift and go to state 151
    JOIN            shift and go to state 152
    TOSTRING        shift and go to state 153
    LENGTH          shift and go to state 154
    ID              shift and go to state 155


state 103

    (102) listArray -> listArray CORIZQ . expression CORDER
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    listArray                      shift and go to state 61
    expression                     shift and go to state 156

state 104

    (95) expression -> CORIZQ expressionList . CORDER
    (71) expressionList -> expressionList . COMA expression

    CORDER          shift and go to state 157
    COMA            shift and go to state 125


state 105

    (96) expression -> ID PARIZQ . expressionList PARDER
    (97) expression -> ID PARIZQ . PARDER
    (71) expressionList -> . expressionList COMA expression
    (72) expressionList -> . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    PARDER          shift and go to state 159
    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expressionList                 shift and go to state 158
    expression                     shift and go to state 79
    listArray                      shift and go to state 61

state 106

    (106) expression -> TYPEOF ID .

    PYC             reduce using rule 106 (expression -> TYPEOF ID .)
    MAS             reduce using rule 106 (expression -> TYPEOF ID .)
    MENOS           reduce using rule 106 (expression -> TYPEOF ID .)
    POR             reduce using rule 106 (expression -> TYPEOF ID .)
    DIVIDIDO        reduce using rule 106 (expression -> TYPEOF ID .)
    MODULO          reduce using rule 106 (expression -> TYPEOF ID .)
    MAYOR           reduce using rule 106 (expression -> TYPEOF ID .)
    MENOR           reduce using rule 106 (expression -> TYPEOF ID .)
    MAYORIG         reduce using rule 106 (expression -> TYPEOF ID .)
    MENORIG         reduce using rule 106 (expression -> TYPEOF ID .)
    IGIG            reduce using rule 106 (expression -> TYPEOF ID .)
    DIF             reduce using rule 106 (expression -> TYPEOF ID .)
    AND             reduce using rule 106 (expression -> TYPEOF ID .)
    OR              reduce using rule 106 (expression -> TYPEOF ID .)
    TERN            reduce using rule 106 (expression -> TYPEOF ID .)
    PARDER          reduce using rule 106 (expression -> TYPEOF ID .)
    COMA            reduce using rule 106 (expression -> TYPEOF ID .)
    CORDER          reduce using rule 106 (expression -> TYPEOF ID .)
    DOSPTS          reduce using rule 106 (expression -> TYPEOF ID .)


state 107

    (24) print -> CONSOLE PUNTO LOG PARIZQ . expressionList PARDER PYC
    (71) expressionList -> . expressionList COMA expression
    (72) expressionList -> . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expressionList                 shift and go to state 160
    expression                     shift and go to state 79
    listArray                      shift and go to state 61

state 108

    (25) ifinstruction -> IF PARIZQ expression PARDER . LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> IF PARIZQ expression PARDER . LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> IF PARIZQ expression PARDER . LLAVEIZQ block LLAVEDER ELSE block

    LLAVEIZQ        shift and go to state 161


state 109

    (28) forinstruction -> FOR PARIZQ declaration expression . PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             shift and go to state 162
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 110

    (38) declaration -> VAR ID . DOSPTS type IG expression PYC
    (39) declaration -> VAR ID . IG expression PYC

    DOSPTS          shift and go to state 163
    IG              shift and go to state 73


state 111

    (40) declaration -> CONST ID . DOSPTS type IG expression PYC
    (41) declaration -> CONST ID . IG expression PYC

    DOSPTS          shift and go to state 164
    IG              shift and go to state 82


state 112

    (31) switchinstruction -> SWITCH PARIZQ expression PARDER . LLAVEIZQ caseinstruction LLAVEDER

    LLAVEIZQ        shift and go to state 165


state 113

    (37) whileinstruction -> WHILE PARIZQ expression PARDER . LLAVEIZQ block LLAVEDER

    LLAVEIZQ        shift and go to state 166


state 114

    (38) declaration -> VAR ID DOSPTS type . IG expression PYC
    (42) arraydeclaration -> VAR ID DOSPTS type . CORIZQ CORDER IG expression PYC

    IG              shift and go to state 167
    CORIZQ          shift and go to state 168


state 115

    (66) type -> NUMBER .

    IG              reduce using rule 66 (type -> NUMBER .)
    CORIZQ          reduce using rule 66 (type -> NUMBER .)
    LLAVEIZQ        reduce using rule 66 (type -> NUMBER .)
    PARDER          reduce using rule 66 (type -> NUMBER .)
    COMA            reduce using rule 66 (type -> NUMBER .)
    ID              reduce using rule 66 (type -> NUMBER .)


state 116

    (67) type -> FLOAT .

    IG              reduce using rule 67 (type -> FLOAT .)
    CORIZQ          reduce using rule 67 (type -> FLOAT .)
    LLAVEIZQ        reduce using rule 67 (type -> FLOAT .)
    PARDER          reduce using rule 67 (type -> FLOAT .)
    COMA            reduce using rule 67 (type -> FLOAT .)
    ID              reduce using rule 67 (type -> FLOAT .)


state 117

    (68) type -> STRING .

    IG              reduce using rule 68 (type -> STRING .)
    CORIZQ          reduce using rule 68 (type -> STRING .)
    LLAVEIZQ        reduce using rule 68 (type -> STRING .)
    PARDER          reduce using rule 68 (type -> STRING .)
    COMA            reduce using rule 68 (type -> STRING .)
    ID              reduce using rule 68 (type -> STRING .)


state 118

    (69) type -> CHAR .

    IG              reduce using rule 69 (type -> CHAR .)
    CORIZQ          reduce using rule 69 (type -> CHAR .)
    LLAVEIZQ        reduce using rule 69 (type -> CHAR .)
    PARDER          reduce using rule 69 (type -> CHAR .)
    COMA            reduce using rule 69 (type -> CHAR .)
    ID              reduce using rule 69 (type -> CHAR .)


state 119

    (70) type -> BOOL .

    IG              reduce using rule 70 (type -> BOOL .)
    CORIZQ          reduce using rule 70 (type -> BOOL .)
    LLAVEIZQ        reduce using rule 70 (type -> BOOL .)
    PARDER          reduce using rule 70 (type -> BOOL .)
    COMA            reduce using rule 70 (type -> BOOL .)
    ID              reduce using rule 70 (type -> BOOL .)


state 120

    (39) declaration -> VAR ID IG expression . PYC
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             shift and go to state 169
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 121

    (43) assignment -> ID IG expression PYC .

    CONSOLE         reduce using rule 43 (assignment -> ID IG expression PYC .)
    IF              reduce using rule 43 (assignment -> ID IG expression PYC .)
    FOR             reduce using rule 43 (assignment -> ID IG expression PYC .)
    SWITCH          reduce using rule 43 (assignment -> ID IG expression PYC .)
    WHILE           reduce using rule 43 (assignment -> ID IG expression PYC .)
    VAR             reduce using rule 43 (assignment -> ID IG expression PYC .)
    CONST           reduce using rule 43 (assignment -> ID IG expression PYC .)
    ID              reduce using rule 43 (assignment -> ID IG expression PYC .)
    BREAK           reduce using rule 43 (assignment -> ID IG expression PYC .)
    CONTINUE        reduce using rule 43 (assignment -> ID IG expression PYC .)
    FUNC            reduce using rule 43 (assignment -> ID IG expression PYC .)
    RETURN          reduce using rule 43 (assignment -> ID IG expression PYC .)
    $end            reduce using rule 43 (assignment -> ID IG expression PYC .)
    LLAVEDER        reduce using rule 43 (assignment -> ID IG expression PYC .)


state 122

    (44) assignmentsuma -> ID MAS IG expression . PYC
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             shift and go to state 170
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 123

    (45) assignmentresta -> ID MENOS IG expression . PYC
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             shift and go to state 171
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 124

    (48) call -> ID PARIZQ expressionList PARDER . PYC

    PYC             shift and go to state 172


state 125

    (71) expressionList -> expressionList COMA . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 173
    listArray                      shift and go to state 61

state 126

    (49) call -> ID PARIZQ PARDER PYC .

    CONSOLE         reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)
    IF              reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)
    FOR             reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)
    SWITCH          reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)
    WHILE           reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)
    VAR             reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)
    CONST           reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)
    ID              reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)
    BREAK           reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)
    CONTINUE        reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)
    FUNC            reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)
    RETURN          reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)
    $end            reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)
    LLAVEDER        reduce using rule 49 (call -> ID PARIZQ PARDER PYC .)


state 127

    (65) pushinstruction -> ID PUNTO PUSH PARIZQ . expression PARDER PYC
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 174
    listArray                      shift and go to state 61

state 128

    (40) declaration -> CONST ID DOSPTS type . IG expression PYC
    (61) toLowerinstruction -> CONST ID DOSPTS type . IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> CONST ID DOSPTS type . IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> CONST ID DOSPTS type . IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> CONST ID DOSPTS type . IG PARSEFLOAT PARIZQ expression PARDER PYC

    IG              shift and go to state 175


state 129

    (41) declaration -> CONST ID IG expression . PYC
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             shift and go to state 176
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 130

    (50) functionstmt -> FUNC ID funcparams functype . LLAVEIZQ block LLAVEDER

    LLAVEIZQ        shift and go to state 177


state 131

    (57) functype -> DOSPTS . type
    (66) type -> . NUMBER
    (67) type -> . FLOAT
    (68) type -> . STRING
    (69) type -> . CHAR
    (70) type -> . BOOL

    NUMBER          shift and go to state 115
    FLOAT           shift and go to state 116
    STRING          shift and go to state 117
    CHAR            shift and go to state 118
    BOOL            shift and go to state 119

    type                           shift and go to state 178

state 132

    (51) funcparams -> PARIZQ paramsList . PARDER
    (53) paramsList -> paramsList . COMA ID DOSPTS type
    (55) paramsList -> paramsList . ID DOSPTS type CORIZQ CORDER

    PARDER          shift and go to state 179
    COMA            shift and go to state 180
    ID              shift and go to state 181


state 133

    (52) funcparams -> PARIZQ PARDER .

    DOSPTS          reduce using rule 52 (funcparams -> PARIZQ PARDER .)
    LLAVEIZQ        reduce using rule 52 (funcparams -> PARIZQ PARDER .)


state 134

    (54) paramsList -> ID . DOSPTS type
    (56) paramsList -> ID . DOSPTS type CORIZQ CORDER

    DOSPTS          shift and go to state 182


state 135

    (73) expression -> expression MAS expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             reduce using rule 73 (expression -> expression MAS expression .)
    MAS             reduce using rule 73 (expression -> expression MAS expression .)
    MENOS           reduce using rule 73 (expression -> expression MAS expression .)
    MODULO          reduce using rule 73 (expression -> expression MAS expression .)
    MAYOR           reduce using rule 73 (expression -> expression MAS expression .)
    MENOR           reduce using rule 73 (expression -> expression MAS expression .)
    MAYORIG         reduce using rule 73 (expression -> expression MAS expression .)
    MENORIG         reduce using rule 73 (expression -> expression MAS expression .)
    IGIG            reduce using rule 73 (expression -> expression MAS expression .)
    DIF             reduce using rule 73 (expression -> expression MAS expression .)
    AND             reduce using rule 73 (expression -> expression MAS expression .)
    OR              reduce using rule 73 (expression -> expression MAS expression .)
    TERN            reduce using rule 73 (expression -> expression MAS expression .)
    PARDER          reduce using rule 73 (expression -> expression MAS expression .)
    COMA            reduce using rule 73 (expression -> expression MAS expression .)
    CORDER          reduce using rule 73 (expression -> expression MAS expression .)
    DOSPTS          reduce using rule 73 (expression -> expression MAS expression .)
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89

  ! POR             [ reduce using rule 73 (expression -> expression MAS expression .) ]
  ! DIVIDIDO        [ reduce using rule 73 (expression -> expression MAS expression .) ]
  ! MAS             [ shift and go to state 86 ]
  ! MENOS           [ shift and go to state 87 ]
  ! MODULO          [ shift and go to state 90 ]
  ! MAYOR           [ shift and go to state 91 ]
  ! MENOR           [ shift and go to state 92 ]
  ! MAYORIG         [ shift and go to state 93 ]
  ! MENORIG         [ shift and go to state 94 ]
  ! IGIG            [ shift and go to state 95 ]
  ! DIF             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! TERN            [ shift and go to state 99 ]


state 136

    (74) expression -> expression MENOS expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             reduce using rule 74 (expression -> expression MENOS expression .)
    MAS             reduce using rule 74 (expression -> expression MENOS expression .)
    MENOS           reduce using rule 74 (expression -> expression MENOS expression .)
    MODULO          reduce using rule 74 (expression -> expression MENOS expression .)
    MAYOR           reduce using rule 74 (expression -> expression MENOS expression .)
    MENOR           reduce using rule 74 (expression -> expression MENOS expression .)
    MAYORIG         reduce using rule 74 (expression -> expression MENOS expression .)
    MENORIG         reduce using rule 74 (expression -> expression MENOS expression .)
    IGIG            reduce using rule 74 (expression -> expression MENOS expression .)
    DIF             reduce using rule 74 (expression -> expression MENOS expression .)
    AND             reduce using rule 74 (expression -> expression MENOS expression .)
    OR              reduce using rule 74 (expression -> expression MENOS expression .)
    TERN            reduce using rule 74 (expression -> expression MENOS expression .)
    PARDER          reduce using rule 74 (expression -> expression MENOS expression .)
    COMA            reduce using rule 74 (expression -> expression MENOS expression .)
    CORDER          reduce using rule 74 (expression -> expression MENOS expression .)
    DOSPTS          reduce using rule 74 (expression -> expression MENOS expression .)
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89

  ! POR             [ reduce using rule 74 (expression -> expression MENOS expression .) ]
  ! DIVIDIDO        [ reduce using rule 74 (expression -> expression MENOS expression .) ]
  ! MAS             [ shift and go to state 86 ]
  ! MENOS           [ shift and go to state 87 ]
  ! MODULO          [ shift and go to state 90 ]
  ! MAYOR           [ shift and go to state 91 ]
  ! MENOR           [ shift and go to state 92 ]
  ! MAYORIG         [ shift and go to state 93 ]
  ! MENORIG         [ shift and go to state 94 ]
  ! IGIG            [ shift and go to state 95 ]
  ! DIF             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! TERN            [ shift and go to state 99 ]


state 137

    (75) expression -> expression POR expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             reduce using rule 75 (expression -> expression POR expression .)
    MAS             reduce using rule 75 (expression -> expression POR expression .)
    MENOS           reduce using rule 75 (expression -> expression POR expression .)
    POR             reduce using rule 75 (expression -> expression POR expression .)
    DIVIDIDO        reduce using rule 75 (expression -> expression POR expression .)
    MODULO          reduce using rule 75 (expression -> expression POR expression .)
    MAYOR           reduce using rule 75 (expression -> expression POR expression .)
    MENOR           reduce using rule 75 (expression -> expression POR expression .)
    MAYORIG         reduce using rule 75 (expression -> expression POR expression .)
    MENORIG         reduce using rule 75 (expression -> expression POR expression .)
    IGIG            reduce using rule 75 (expression -> expression POR expression .)
    DIF             reduce using rule 75 (expression -> expression POR expression .)
    AND             reduce using rule 75 (expression -> expression POR expression .)
    OR              reduce using rule 75 (expression -> expression POR expression .)
    TERN            reduce using rule 75 (expression -> expression POR expression .)
    PARDER          reduce using rule 75 (expression -> expression POR expression .)
    COMA            reduce using rule 75 (expression -> expression POR expression .)
    CORDER          reduce using rule 75 (expression -> expression POR expression .)
    DOSPTS          reduce using rule 75 (expression -> expression POR expression .)

  ! MAS             [ shift and go to state 86 ]
  ! MENOS           [ shift and go to state 87 ]
  ! POR             [ shift and go to state 88 ]
  ! DIVIDIDO        [ shift and go to state 89 ]
  ! MODULO          [ shift and go to state 90 ]
  ! MAYOR           [ shift and go to state 91 ]
  ! MENOR           [ shift and go to state 92 ]
  ! MAYORIG         [ shift and go to state 93 ]
  ! MENORIG         [ shift and go to state 94 ]
  ! IGIG            [ shift and go to state 95 ]
  ! DIF             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! TERN            [ shift and go to state 99 ]


state 138

    (76) expression -> expression DIVIDIDO expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    MAS             reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    MENOS           reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    POR             reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    DIVIDIDO        reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    MODULO          reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    MAYOR           reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    MENOR           reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    MAYORIG         reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    MENORIG         reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    IGIG            reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    DIF             reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    AND             reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    OR              reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    TERN            reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    PARDER          reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    COMA            reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    CORDER          reduce using rule 76 (expression -> expression DIVIDIDO expression .)
    DOSPTS          reduce using rule 76 (expression -> expression DIVIDIDO expression .)

  ! MAS             [ shift and go to state 86 ]
  ! MENOS           [ shift and go to state 87 ]
  ! POR             [ shift and go to state 88 ]
  ! DIVIDIDO        [ shift and go to state 89 ]
  ! MODULO          [ shift and go to state 90 ]
  ! MAYOR           [ shift and go to state 91 ]
  ! MENOR           [ shift and go to state 92 ]
  ! MAYORIG         [ shift and go to state 93 ]
  ! MENORIG         [ shift and go to state 94 ]
  ! IGIG            [ shift and go to state 95 ]
  ! DIF             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! TERN            [ shift and go to state 99 ]


state 139

    (77) expression -> expression MODULO expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for IGIG resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for TERN resolved as shift
    PYC             reduce using rule 77 (expression -> expression MODULO expression .)
    PARDER          reduce using rule 77 (expression -> expression MODULO expression .)
    COMA            reduce using rule 77 (expression -> expression MODULO expression .)
    CORDER          reduce using rule 77 (expression -> expression MODULO expression .)
    DOSPTS          reduce using rule 77 (expression -> expression MODULO expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99

  ! MAS             [ reduce using rule 77 (expression -> expression MODULO expression .) ]
  ! MENOS           [ reduce using rule 77 (expression -> expression MODULO expression .) ]
  ! POR             [ reduce using rule 77 (expression -> expression MODULO expression .) ]
  ! DIVIDIDO        [ reduce using rule 77 (expression -> expression MODULO expression .) ]
  ! MODULO          [ reduce using rule 77 (expression -> expression MODULO expression .) ]
  ! MAYOR           [ reduce using rule 77 (expression -> expression MODULO expression .) ]
  ! MENOR           [ reduce using rule 77 (expression -> expression MODULO expression .) ]
  ! MAYORIG         [ reduce using rule 77 (expression -> expression MODULO expression .) ]
  ! MENORIG         [ reduce using rule 77 (expression -> expression MODULO expression .) ]
  ! IGIG            [ reduce using rule 77 (expression -> expression MODULO expression .) ]
  ! DIF             [ reduce using rule 77 (expression -> expression MODULO expression .) ]
  ! AND             [ reduce using rule 77 (expression -> expression MODULO expression .) ]
  ! OR              [ reduce using rule 77 (expression -> expression MODULO expression .) ]
  ! TERN            [ reduce using rule 77 (expression -> expression MODULO expression .) ]


state 140

    (78) expression -> expression MAYOR expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             reduce using rule 78 (expression -> expression MAYOR expression .)
    MODULO          reduce using rule 78 (expression -> expression MAYOR expression .)
    MAYOR           reduce using rule 78 (expression -> expression MAYOR expression .)
    MENOR           reduce using rule 78 (expression -> expression MAYOR expression .)
    IGIG            reduce using rule 78 (expression -> expression MAYOR expression .)
    DIF             reduce using rule 78 (expression -> expression MAYOR expression .)
    AND             reduce using rule 78 (expression -> expression MAYOR expression .)
    OR              reduce using rule 78 (expression -> expression MAYOR expression .)
    TERN            reduce using rule 78 (expression -> expression MAYOR expression .)
    PARDER          reduce using rule 78 (expression -> expression MAYOR expression .)
    COMA            reduce using rule 78 (expression -> expression MAYOR expression .)
    CORDER          reduce using rule 78 (expression -> expression MAYOR expression .)
    DOSPTS          reduce using rule 78 (expression -> expression MAYOR expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94

  ! MAS             [ reduce using rule 78 (expression -> expression MAYOR expression .) ]
  ! MENOS           [ reduce using rule 78 (expression -> expression MAYOR expression .) ]
  ! POR             [ reduce using rule 78 (expression -> expression MAYOR expression .) ]
  ! DIVIDIDO        [ reduce using rule 78 (expression -> expression MAYOR expression .) ]
  ! MAYORIG         [ reduce using rule 78 (expression -> expression MAYOR expression .) ]
  ! MENORIG         [ reduce using rule 78 (expression -> expression MAYOR expression .) ]
  ! MODULO          [ shift and go to state 90 ]
  ! MAYOR           [ shift and go to state 91 ]
  ! MENOR           [ shift and go to state 92 ]
  ! IGIG            [ shift and go to state 95 ]
  ! DIF             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! TERN            [ shift and go to state 99 ]


state 141

    (79) expression -> expression MENOR expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             reduce using rule 79 (expression -> expression MENOR expression .)
    MODULO          reduce using rule 79 (expression -> expression MENOR expression .)
    MAYOR           reduce using rule 79 (expression -> expression MENOR expression .)
    MENOR           reduce using rule 79 (expression -> expression MENOR expression .)
    IGIG            reduce using rule 79 (expression -> expression MENOR expression .)
    DIF             reduce using rule 79 (expression -> expression MENOR expression .)
    AND             reduce using rule 79 (expression -> expression MENOR expression .)
    OR              reduce using rule 79 (expression -> expression MENOR expression .)
    TERN            reduce using rule 79 (expression -> expression MENOR expression .)
    PARDER          reduce using rule 79 (expression -> expression MENOR expression .)
    COMA            reduce using rule 79 (expression -> expression MENOR expression .)
    CORDER          reduce using rule 79 (expression -> expression MENOR expression .)
    DOSPTS          reduce using rule 79 (expression -> expression MENOR expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94

  ! MAS             [ reduce using rule 79 (expression -> expression MENOR expression .) ]
  ! MENOS           [ reduce using rule 79 (expression -> expression MENOR expression .) ]
  ! POR             [ reduce using rule 79 (expression -> expression MENOR expression .) ]
  ! DIVIDIDO        [ reduce using rule 79 (expression -> expression MENOR expression .) ]
  ! MAYORIG         [ reduce using rule 79 (expression -> expression MENOR expression .) ]
  ! MENORIG         [ reduce using rule 79 (expression -> expression MENOR expression .) ]
  ! MODULO          [ shift and go to state 90 ]
  ! MAYOR           [ shift and go to state 91 ]
  ! MENOR           [ shift and go to state 92 ]
  ! IGIG            [ shift and go to state 95 ]
  ! DIF             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! TERN            [ shift and go to state 99 ]


state 142

    (80) expression -> expression MAYORIG expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             reduce using rule 80 (expression -> expression MAYORIG expression .)
    MODULO          reduce using rule 80 (expression -> expression MAYORIG expression .)
    MAYOR           reduce using rule 80 (expression -> expression MAYORIG expression .)
    MENOR           reduce using rule 80 (expression -> expression MAYORIG expression .)
    MAYORIG         reduce using rule 80 (expression -> expression MAYORIG expression .)
    MENORIG         reduce using rule 80 (expression -> expression MAYORIG expression .)
    IGIG            reduce using rule 80 (expression -> expression MAYORIG expression .)
    DIF             reduce using rule 80 (expression -> expression MAYORIG expression .)
    AND             reduce using rule 80 (expression -> expression MAYORIG expression .)
    OR              reduce using rule 80 (expression -> expression MAYORIG expression .)
    TERN            reduce using rule 80 (expression -> expression MAYORIG expression .)
    PARDER          reduce using rule 80 (expression -> expression MAYORIG expression .)
    COMA            reduce using rule 80 (expression -> expression MAYORIG expression .)
    CORDER          reduce using rule 80 (expression -> expression MAYORIG expression .)
    DOSPTS          reduce using rule 80 (expression -> expression MAYORIG expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89

  ! MAS             [ reduce using rule 80 (expression -> expression MAYORIG expression .) ]
  ! MENOS           [ reduce using rule 80 (expression -> expression MAYORIG expression .) ]
  ! POR             [ reduce using rule 80 (expression -> expression MAYORIG expression .) ]
  ! DIVIDIDO        [ reduce using rule 80 (expression -> expression MAYORIG expression .) ]
  ! MODULO          [ shift and go to state 90 ]
  ! MAYOR           [ shift and go to state 91 ]
  ! MENOR           [ shift and go to state 92 ]
  ! MAYORIG         [ shift and go to state 93 ]
  ! MENORIG         [ shift and go to state 94 ]
  ! IGIG            [ shift and go to state 95 ]
  ! DIF             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! TERN            [ shift and go to state 99 ]


state 143

    (81) expression -> expression MENORIG expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             reduce using rule 81 (expression -> expression MENORIG expression .)
    MODULO          reduce using rule 81 (expression -> expression MENORIG expression .)
    MAYOR           reduce using rule 81 (expression -> expression MENORIG expression .)
    MENOR           reduce using rule 81 (expression -> expression MENORIG expression .)
    MAYORIG         reduce using rule 81 (expression -> expression MENORIG expression .)
    MENORIG         reduce using rule 81 (expression -> expression MENORIG expression .)
    IGIG            reduce using rule 81 (expression -> expression MENORIG expression .)
    DIF             reduce using rule 81 (expression -> expression MENORIG expression .)
    AND             reduce using rule 81 (expression -> expression MENORIG expression .)
    OR              reduce using rule 81 (expression -> expression MENORIG expression .)
    TERN            reduce using rule 81 (expression -> expression MENORIG expression .)
    PARDER          reduce using rule 81 (expression -> expression MENORIG expression .)
    COMA            reduce using rule 81 (expression -> expression MENORIG expression .)
    CORDER          reduce using rule 81 (expression -> expression MENORIG expression .)
    DOSPTS          reduce using rule 81 (expression -> expression MENORIG expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89

  ! MAS             [ reduce using rule 81 (expression -> expression MENORIG expression .) ]
  ! MENOS           [ reduce using rule 81 (expression -> expression MENORIG expression .) ]
  ! POR             [ reduce using rule 81 (expression -> expression MENORIG expression .) ]
  ! DIVIDIDO        [ reduce using rule 81 (expression -> expression MENORIG expression .) ]
  ! MODULO          [ shift and go to state 90 ]
  ! MAYOR           [ shift and go to state 91 ]
  ! MENOR           [ shift and go to state 92 ]
  ! MAYORIG         [ shift and go to state 93 ]
  ! MENORIG         [ shift and go to state 94 ]
  ! IGIG            [ shift and go to state 95 ]
  ! DIF             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! TERN            [ shift and go to state 99 ]


state 144

    (82) expression -> expression IGIG expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             reduce using rule 82 (expression -> expression IGIG expression .)
    MODULO          reduce using rule 82 (expression -> expression IGIG expression .)
    IGIG            reduce using rule 82 (expression -> expression IGIG expression .)
    DIF             reduce using rule 82 (expression -> expression IGIG expression .)
    AND             reduce using rule 82 (expression -> expression IGIG expression .)
    OR              reduce using rule 82 (expression -> expression IGIG expression .)
    TERN            reduce using rule 82 (expression -> expression IGIG expression .)
    PARDER          reduce using rule 82 (expression -> expression IGIG expression .)
    COMA            reduce using rule 82 (expression -> expression IGIG expression .)
    CORDER          reduce using rule 82 (expression -> expression IGIG expression .)
    DOSPTS          reduce using rule 82 (expression -> expression IGIG expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94

  ! MAS             [ reduce using rule 82 (expression -> expression IGIG expression .) ]
  ! MENOS           [ reduce using rule 82 (expression -> expression IGIG expression .) ]
  ! POR             [ reduce using rule 82 (expression -> expression IGIG expression .) ]
  ! DIVIDIDO        [ reduce using rule 82 (expression -> expression IGIG expression .) ]
  ! MAYOR           [ reduce using rule 82 (expression -> expression IGIG expression .) ]
  ! MENOR           [ reduce using rule 82 (expression -> expression IGIG expression .) ]
  ! MAYORIG         [ reduce using rule 82 (expression -> expression IGIG expression .) ]
  ! MENORIG         [ reduce using rule 82 (expression -> expression IGIG expression .) ]
  ! MODULO          [ shift and go to state 90 ]
  ! IGIG            [ shift and go to state 95 ]
  ! DIF             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! TERN            [ shift and go to state 99 ]


state 145

    (83) expression -> expression DIF expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             reduce using rule 83 (expression -> expression DIF expression .)
    MODULO          reduce using rule 83 (expression -> expression DIF expression .)
    IGIG            reduce using rule 83 (expression -> expression DIF expression .)
    DIF             reduce using rule 83 (expression -> expression DIF expression .)
    AND             reduce using rule 83 (expression -> expression DIF expression .)
    OR              reduce using rule 83 (expression -> expression DIF expression .)
    TERN            reduce using rule 83 (expression -> expression DIF expression .)
    PARDER          reduce using rule 83 (expression -> expression DIF expression .)
    COMA            reduce using rule 83 (expression -> expression DIF expression .)
    CORDER          reduce using rule 83 (expression -> expression DIF expression .)
    DOSPTS          reduce using rule 83 (expression -> expression DIF expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94

  ! MAS             [ reduce using rule 83 (expression -> expression DIF expression .) ]
  ! MENOS           [ reduce using rule 83 (expression -> expression DIF expression .) ]
  ! POR             [ reduce using rule 83 (expression -> expression DIF expression .) ]
  ! DIVIDIDO        [ reduce using rule 83 (expression -> expression DIF expression .) ]
  ! MAYOR           [ reduce using rule 83 (expression -> expression DIF expression .) ]
  ! MENOR           [ reduce using rule 83 (expression -> expression DIF expression .) ]
  ! MAYORIG         [ reduce using rule 83 (expression -> expression DIF expression .) ]
  ! MENORIG         [ reduce using rule 83 (expression -> expression DIF expression .) ]
  ! MODULO          [ shift and go to state 90 ]
  ! IGIG            [ shift and go to state 95 ]
  ! DIF             [ shift and go to state 96 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! TERN            [ shift and go to state 99 ]


state 146

    (84) expression -> expression AND expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             reduce using rule 84 (expression -> expression AND expression .)
    MODULO          reduce using rule 84 (expression -> expression AND expression .)
    AND             reduce using rule 84 (expression -> expression AND expression .)
    OR              reduce using rule 84 (expression -> expression AND expression .)
    TERN            reduce using rule 84 (expression -> expression AND expression .)
    PARDER          reduce using rule 84 (expression -> expression AND expression .)
    COMA            reduce using rule 84 (expression -> expression AND expression .)
    CORDER          reduce using rule 84 (expression -> expression AND expression .)
    DOSPTS          reduce using rule 84 (expression -> expression AND expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96

  ! MAS             [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! MENOS           [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! POR             [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! DIVIDIDO        [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! MAYOR           [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! MENOR           [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! MAYORIG         [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! MENORIG         [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! IGIG            [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! DIF             [ reduce using rule 84 (expression -> expression AND expression .) ]
  ! MODULO          [ shift and go to state 90 ]
  ! AND             [ shift and go to state 97 ]
  ! OR              [ shift and go to state 98 ]
  ! TERN            [ shift and go to state 99 ]


state 147

    (85) expression -> expression OR expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             reduce using rule 85 (expression -> expression OR expression .)
    MODULO          reduce using rule 85 (expression -> expression OR expression .)
    OR              reduce using rule 85 (expression -> expression OR expression .)
    TERN            reduce using rule 85 (expression -> expression OR expression .)
    PARDER          reduce using rule 85 (expression -> expression OR expression .)
    COMA            reduce using rule 85 (expression -> expression OR expression .)
    CORDER          reduce using rule 85 (expression -> expression OR expression .)
    DOSPTS          reduce using rule 85 (expression -> expression OR expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97

  ! MAS             [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! MENOS           [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! POR             [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! DIVIDIDO        [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! MAYOR           [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! MENOR           [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! MAYORIG         [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! MENORIG         [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! IGIG            [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! DIF             [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 85 (expression -> expression OR expression .) ]
  ! MODULO          [ shift and go to state 90 ]
  ! OR              [ shift and go to state 98 ]
  ! TERN            [ shift and go to state 99 ]


state 148

    (88) expression -> expression TERN expression . DOSPTS expression
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    DOSPTS          shift and go to state 183
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 149

    (87) expression -> PARIZQ expression PARDER .

    PYC             reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    MAS             reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    MENOS           reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    POR             reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    MODULO          reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    MAYOR           reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    MENOR           reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    MAYORIG         reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    MENORIG         reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    IGIG            reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    DIF             reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    AND             reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    OR              reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    TERN            reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    PARDER          reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    COMA            reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    CORDER          reduce using rule 87 (expression -> PARIZQ expression PARDER .)
    DOSPTS          reduce using rule 87 (expression -> PARIZQ expression PARDER .)


state 150

    (98) listArray -> listArray PUNTO INDEXOF . PARIZQ expression PARDER

    PARIZQ          shift and go to state 184


state 151

    (99) listArray -> listArray PUNTO POP . PARIZQ PARDER

    PARIZQ          shift and go to state 185


state 152

    (100) listArray -> listArray PUNTO JOIN . PARIZQ PARDER

    PARIZQ          shift and go to state 186


state 153

    (101) listArray -> listArray PUNTO TOSTRING . PARIZQ PARDER

    PARIZQ          shift and go to state 187


state 154

    (103) listArray -> listArray PUNTO LENGTH .

    PUNTO           reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    CORIZQ          reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    PYC             reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    MAS             reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    MENOS           reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    POR             reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    DIVIDIDO        reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    MODULO          reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    MAYOR           reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    MENOR           reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    MAYORIG         reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    MENORIG         reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    IGIG            reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    DIF             reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    AND             reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    OR              reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    TERN            reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    PARDER          reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    COMA            reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    CORDER          reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)
    DOSPTS          reduce using rule 103 (listArray -> listArray PUNTO LENGTH .)


state 155

    (104) listArray -> listArray PUNTO ID .

    PUNTO           reduce using rule 104 (listArray -> listArray PUNTO ID .)
    CORIZQ          reduce using rule 104 (listArray -> listArray PUNTO ID .)
    PYC             reduce using rule 104 (listArray -> listArray PUNTO ID .)
    MAS             reduce using rule 104 (listArray -> listArray PUNTO ID .)
    MENOS           reduce using rule 104 (listArray -> listArray PUNTO ID .)
    POR             reduce using rule 104 (listArray -> listArray PUNTO ID .)
    DIVIDIDO        reduce using rule 104 (listArray -> listArray PUNTO ID .)
    MODULO          reduce using rule 104 (listArray -> listArray PUNTO ID .)
    MAYOR           reduce using rule 104 (listArray -> listArray PUNTO ID .)
    MENOR           reduce using rule 104 (listArray -> listArray PUNTO ID .)
    MAYORIG         reduce using rule 104 (listArray -> listArray PUNTO ID .)
    MENORIG         reduce using rule 104 (listArray -> listArray PUNTO ID .)
    IGIG            reduce using rule 104 (listArray -> listArray PUNTO ID .)
    DIF             reduce using rule 104 (listArray -> listArray PUNTO ID .)
    AND             reduce using rule 104 (listArray -> listArray PUNTO ID .)
    OR              reduce using rule 104 (listArray -> listArray PUNTO ID .)
    TERN            reduce using rule 104 (listArray -> listArray PUNTO ID .)
    PARDER          reduce using rule 104 (listArray -> listArray PUNTO ID .)
    COMA            reduce using rule 104 (listArray -> listArray PUNTO ID .)
    CORDER          reduce using rule 104 (listArray -> listArray PUNTO ID .)
    DOSPTS          reduce using rule 104 (listArray -> listArray PUNTO ID .)


state 156

    (102) listArray -> listArray CORIZQ expression . CORDER
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    CORDER          shift and go to state 188
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 157

    (95) expression -> CORIZQ expressionList CORDER .

    PYC             reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    MAS             reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    MENOS           reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    POR             reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    DIVIDIDO        reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    MODULO          reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    MAYOR           reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    MENOR           reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    MAYORIG         reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    MENORIG         reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    IGIG            reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    DIF             reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    AND             reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    OR              reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    TERN            reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    PARDER          reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    COMA            reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    CORDER          reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)
    DOSPTS          reduce using rule 95 (expression -> CORIZQ expressionList CORDER .)


state 158

    (96) expression -> ID PARIZQ expressionList . PARDER
    (71) expressionList -> expressionList . COMA expression

    PARDER          shift and go to state 189
    COMA            shift and go to state 125


state 159

    (97) expression -> ID PARIZQ PARDER .

    PYC             reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    MAS             reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    MENOS           reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    POR             reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    MODULO          reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    MAYOR           reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    MENOR           reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    MAYORIG         reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    MENORIG         reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    IGIG            reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    DIF             reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    AND             reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    OR              reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    TERN            reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    PARDER          reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    COMA            reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    CORDER          reduce using rule 97 (expression -> ID PARIZQ PARDER .)
    DOSPTS          reduce using rule 97 (expression -> ID PARIZQ PARDER .)


state 160

    (24) print -> CONSOLE PUNTO LOG PARIZQ expressionList . PARDER PYC
    (71) expressionList -> expressionList . COMA expression

    PARDER          shift and go to state 190
    COMA            shift and go to state 125


state 161

    (25) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ . block LLAVEDER
    (26) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ . block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ . block LLAVEDER ELSE block
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    block                          shift and go to state 191
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 162

    (28) forinstruction -> FOR PARIZQ declaration expression PYC . Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (29) Recurinstruction -> . ID MAS MAS
    (30) Recurinstruction -> . ID MENOS MENOS

    ID              shift and go to state 193

    Recurinstruction               shift and go to state 192

state 163

    (38) declaration -> VAR ID DOSPTS . type IG expression PYC
    (66) type -> . NUMBER
    (67) type -> . FLOAT
    (68) type -> . STRING
    (69) type -> . CHAR
    (70) type -> . BOOL

    NUMBER          shift and go to state 115
    FLOAT           shift and go to state 116
    STRING          shift and go to state 117
    CHAR            shift and go to state 118
    BOOL            shift and go to state 119

    type                           shift and go to state 194

state 164

    (40) declaration -> CONST ID DOSPTS . type IG expression PYC
    (66) type -> . NUMBER
    (67) type -> . FLOAT
    (68) type -> . STRING
    (69) type -> . CHAR
    (70) type -> . BOOL

    NUMBER          shift and go to state 115
    FLOAT           shift and go to state 116
    STRING          shift and go to state 117
    CHAR            shift and go to state 118
    BOOL            shift and go to state 119

    type                           shift and go to state 195

state 165

    (31) switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ . caseinstruction LLAVEDER
    (32) caseinstruction -> . caseinstruction caseindividual
    (33) caseinstruction -> . caseindividual
    (34) caseindividual -> . cases DOSPTS block BREAK PYC
    (35) cases -> . CASE expression
    (36) cases -> . DEFAULT

    CASE            shift and go to state 199
    DEFAULT         shift and go to state 200

    caseinstruction                shift and go to state 196
    caseindividual                 shift and go to state 197
    cases                          shift and go to state 198

state 166

    (37) whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ . block LLAVEDER
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    block                          shift and go to state 201
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 167

    (38) declaration -> VAR ID DOSPTS type IG . expression PYC
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 202
    listArray                      shift and go to state 61

state 168

    (42) arraydeclaration -> VAR ID DOSPTS type CORIZQ . CORDER IG expression PYC

    CORDER          shift and go to state 203


state 169

    (39) declaration -> VAR ID IG expression PYC .

    CONSOLE         reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    IF              reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    FOR             reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    SWITCH          reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    WHILE           reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    VAR             reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    CONST           reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    ID              reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    BREAK           reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    CONTINUE        reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    FUNC            reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    RETURN          reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    $end            reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    NOT             reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    PARIZQ          reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    ENTERO          reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    DECIMAL         reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    BOOLEANO        reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    CADENA          reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    CARACTER        reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    CORIZQ          reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    TYPEOF          reduce using rule 39 (declaration -> VAR ID IG expression PYC .)
    LLAVEDER        reduce using rule 39 (declaration -> VAR ID IG expression PYC .)


state 170

    (44) assignmentsuma -> ID MAS IG expression PYC .

    CONSOLE         reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)
    IF              reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)
    FOR             reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)
    SWITCH          reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)
    WHILE           reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)
    VAR             reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)
    CONST           reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)
    ID              reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)
    BREAK           reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)
    CONTINUE        reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)
    FUNC            reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)
    RETURN          reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)
    $end            reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)
    LLAVEDER        reduce using rule 44 (assignmentsuma -> ID MAS IG expression PYC .)


state 171

    (45) assignmentresta -> ID MENOS IG expression PYC .

    CONSOLE         reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)
    IF              reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)
    FOR             reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)
    SWITCH          reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)
    WHILE           reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)
    VAR             reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)
    CONST           reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)
    ID              reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)
    BREAK           reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)
    CONTINUE        reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)
    FUNC            reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)
    RETURN          reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)
    $end            reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)
    LLAVEDER        reduce using rule 45 (assignmentresta -> ID MENOS IG expression PYC .)


state 172

    (48) call -> ID PARIZQ expressionList PARDER PYC .

    CONSOLE         reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)
    IF              reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)
    FOR             reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)
    SWITCH          reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)
    WHILE           reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)
    VAR             reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)
    CONST           reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)
    ID              reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)
    BREAK           reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)
    CONTINUE        reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)
    FUNC            reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)
    RETURN          reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)
    $end            reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)
    LLAVEDER        reduce using rule 48 (call -> ID PARIZQ expressionList PARDER PYC .)


state 173

    (71) expressionList -> expressionList COMA expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PARDER          reduce using rule 71 (expressionList -> expressionList COMA expression .)
    COMA            reduce using rule 71 (expressionList -> expressionList COMA expression .)
    CORDER          reduce using rule 71 (expressionList -> expressionList COMA expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 174

    (65) pushinstruction -> ID PUNTO PUSH PARIZQ expression . PARDER PYC
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PARDER          shift and go to state 204
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 175

    (40) declaration -> CONST ID DOSPTS type IG . expression PYC
    (61) toLowerinstruction -> CONST ID DOSPTS type IG . ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> CONST ID DOSPTS type IG . ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> CONST ID DOSPTS type IG . PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> CONST ID DOSPTS type IG . PARSEFLOAT PARIZQ expression PARDER PYC
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    ID              shift and go to state 205
    PARSEINT        shift and go to state 207
    PARSEFLOAT      shift and go to state 208
    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 206
    listArray                      shift and go to state 61

state 176

    (41) declaration -> CONST ID IG expression PYC .

    CONSOLE         reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    IF              reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    FOR             reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    SWITCH          reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    WHILE           reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    VAR             reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    CONST           reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    ID              reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    BREAK           reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    CONTINUE        reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    FUNC            reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    RETURN          reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    $end            reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    NOT             reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    PARIZQ          reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    ENTERO          reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    DECIMAL         reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    BOOLEANO        reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    CADENA          reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    CARACTER        reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    CORIZQ          reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    TYPEOF          reduce using rule 41 (declaration -> CONST ID IG expression PYC .)
    LLAVEDER        reduce using rule 41 (declaration -> CONST ID IG expression PYC .)


state 177

    (50) functionstmt -> FUNC ID funcparams functype LLAVEIZQ . block LLAVEDER
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    block                          shift and go to state 209
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 178

    (57) functype -> DOSPTS type .

    LLAVEIZQ        reduce using rule 57 (functype -> DOSPTS type .)


state 179

    (51) funcparams -> PARIZQ paramsList PARDER .

    DOSPTS          reduce using rule 51 (funcparams -> PARIZQ paramsList PARDER .)
    LLAVEIZQ        reduce using rule 51 (funcparams -> PARIZQ paramsList PARDER .)


state 180

    (53) paramsList -> paramsList COMA . ID DOSPTS type

    ID              shift and go to state 210


state 181

    (55) paramsList -> paramsList ID . DOSPTS type CORIZQ CORDER

    DOSPTS          shift and go to state 211


state 182

    (54) paramsList -> ID DOSPTS . type
    (56) paramsList -> ID DOSPTS . type CORIZQ CORDER
    (66) type -> . NUMBER
    (67) type -> . FLOAT
    (68) type -> . STRING
    (69) type -> . CHAR
    (70) type -> . BOOL

    NUMBER          shift and go to state 115
    FLOAT           shift and go to state 116
    STRING          shift and go to state 117
    CHAR            shift and go to state 118
    BOOL            shift and go to state 119

    type                           shift and go to state 212

state 183

    (88) expression -> expression TERN expression DOSPTS . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 213
    listArray                      shift and go to state 61

state 184

    (98) listArray -> listArray PUNTO INDEXOF PARIZQ . expression PARDER
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    listArray                      shift and go to state 61
    expression                     shift and go to state 214

state 185

    (99) listArray -> listArray PUNTO POP PARIZQ . PARDER

    PARDER          shift and go to state 215


state 186

    (100) listArray -> listArray PUNTO JOIN PARIZQ . PARDER

    PARDER          shift and go to state 216


state 187

    (101) listArray -> listArray PUNTO TOSTRING PARIZQ . PARDER

    PARDER          shift and go to state 217


state 188

    (102) listArray -> listArray CORIZQ expression CORDER .

    PUNTO           reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    CORIZQ          reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    PYC             reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    MAS             reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    MENOS           reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    POR             reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    DIVIDIDO        reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    MODULO          reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    MAYOR           reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    MENOR           reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    MAYORIG         reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    MENORIG         reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    IGIG            reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    DIF             reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    AND             reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    OR              reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    TERN            reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    PARDER          reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    COMA            reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    CORDER          reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)
    DOSPTS          reduce using rule 102 (listArray -> listArray CORIZQ expression CORDER .)


state 189

    (96) expression -> ID PARIZQ expressionList PARDER .

    PYC             reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    MAS             reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    MENOS           reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    POR             reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    DIVIDIDO        reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    MODULO          reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    MAYOR           reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    MENOR           reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    MAYORIG         reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    MENORIG         reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    IGIG            reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    DIF             reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    AND             reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    OR              reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    TERN            reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    PARDER          reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    COMA            reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    CORDER          reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)
    DOSPTS          reduce using rule 96 (expression -> ID PARIZQ expressionList PARDER .)


state 190

    (24) print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER . PYC

    PYC             shift and go to state 218


state 191

    (25) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block . LLAVEDER
    (26) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block . LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block . LLAVEDER ELSE block
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    LLAVEDER        shift and go to state 219
    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    instruccion                    shift and go to state 36
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 192

    (28) forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction . PARDER LLAVEIZQ block LLAVEDER

    PARDER          shift and go to state 220


state 193

    (29) Recurinstruction -> ID . MAS MAS
    (30) Recurinstruction -> ID . MENOS MENOS

    MAS             shift and go to state 221
    MENOS           shift and go to state 222


state 194

    (38) declaration -> VAR ID DOSPTS type . IG expression PYC

    IG              shift and go to state 167


state 195

    (40) declaration -> CONST ID DOSPTS type . IG expression PYC

    IG              shift and go to state 223


state 196

    (31) switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction . LLAVEDER
    (32) caseinstruction -> caseinstruction . caseindividual
    (34) caseindividual -> . cases DOSPTS block BREAK PYC
    (35) cases -> . CASE expression
    (36) cases -> . DEFAULT

    LLAVEDER        shift and go to state 224
    CASE            shift and go to state 199
    DEFAULT         shift and go to state 200

    caseindividual                 shift and go to state 225
    cases                          shift and go to state 198

state 197

    (33) caseinstruction -> caseindividual .

    LLAVEDER        reduce using rule 33 (caseinstruction -> caseindividual .)
    CASE            reduce using rule 33 (caseinstruction -> caseindividual .)
    DEFAULT         reduce using rule 33 (caseinstruction -> caseindividual .)


state 198

    (34) caseindividual -> cases . DOSPTS block BREAK PYC

    DOSPTS          shift and go to state 226


state 199

    (35) cases -> CASE . expression
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 227
    listArray                      shift and go to state 61

state 200

    (36) cases -> DEFAULT .

    DOSPTS          reduce using rule 36 (cases -> DEFAULT .)


state 201

    (37) whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block . LLAVEDER
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    LLAVEDER        shift and go to state 228
    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    instruccion                    shift and go to state 36
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 202

    (38) declaration -> VAR ID DOSPTS type IG expression . PYC
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             shift and go to state 229
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 203

    (42) arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER . IG expression PYC

    IG              shift and go to state 230


state 204

    (65) pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER . PYC

    PYC             shift and go to state 231


state 205

    (61) toLowerinstruction -> CONST ID DOSPTS type IG ID . PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> CONST ID DOSPTS type IG ID . PUNTO TOUPPER PARIZQ PARDER PYC
    (96) expression -> ID . PARIZQ expressionList PARDER
    (97) expression -> ID . PARIZQ PARDER
    (105) listArray -> ID .

  ! shift/reduce conflict for PUNTO resolved as shift
    PUNTO           shift and go to state 232
    PARIZQ          shift and go to state 105
    CORIZQ          reduce using rule 105 (listArray -> ID .)
    PYC             reduce using rule 105 (listArray -> ID .)
    MAS             reduce using rule 105 (listArray -> ID .)
    MENOS           reduce using rule 105 (listArray -> ID .)
    POR             reduce using rule 105 (listArray -> ID .)
    DIVIDIDO        reduce using rule 105 (listArray -> ID .)
    MODULO          reduce using rule 105 (listArray -> ID .)
    MAYOR           reduce using rule 105 (listArray -> ID .)
    MENOR           reduce using rule 105 (listArray -> ID .)
    MAYORIG         reduce using rule 105 (listArray -> ID .)
    MENORIG         reduce using rule 105 (listArray -> ID .)
    IGIG            reduce using rule 105 (listArray -> ID .)
    DIF             reduce using rule 105 (listArray -> ID .)
    AND             reduce using rule 105 (listArray -> ID .)
    OR              reduce using rule 105 (listArray -> ID .)
    TERN            reduce using rule 105 (listArray -> ID .)

  ! PUNTO           [ reduce using rule 105 (listArray -> ID .) ]


state 206

    (40) declaration -> CONST ID DOSPTS type IG expression . PYC
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             shift and go to state 233
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 207

    (63) parseintinstruction -> CONST ID DOSPTS type IG PARSEINT . PARIZQ expression PARDER PYC

    PARIZQ          shift and go to state 234


state 208

    (64) parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT . PARIZQ expression PARDER PYC

    PARIZQ          shift and go to state 235


state 209

    (50) functionstmt -> FUNC ID funcparams functype LLAVEIZQ block . LLAVEDER
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    LLAVEDER        shift and go to state 236
    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    instruccion                    shift and go to state 36
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 210

    (53) paramsList -> paramsList COMA ID . DOSPTS type

    DOSPTS          shift and go to state 237


state 211

    (55) paramsList -> paramsList ID DOSPTS . type CORIZQ CORDER
    (66) type -> . NUMBER
    (67) type -> . FLOAT
    (68) type -> . STRING
    (69) type -> . CHAR
    (70) type -> . BOOL

    NUMBER          shift and go to state 115
    FLOAT           shift and go to state 116
    STRING          shift and go to state 117
    CHAR            shift and go to state 118
    BOOL            shift and go to state 119

    type                           shift and go to state 238

state 212

    (54) paramsList -> ID DOSPTS type .
    (56) paramsList -> ID DOSPTS type . CORIZQ CORDER

    PARDER          reduce using rule 54 (paramsList -> ID DOSPTS type .)
    COMA            reduce using rule 54 (paramsList -> ID DOSPTS type .)
    ID              reduce using rule 54 (paramsList -> ID DOSPTS type .)
    CORIZQ          shift and go to state 239


state 213

    (88) expression -> expression TERN expression DOSPTS expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

  ! shift/reduce conflict for MAS resolved as shift
  ! shift/reduce conflict for MENOS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDIDO resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYORIG resolved as shift
  ! shift/reduce conflict for MENORIG resolved as shift
  ! shift/reduce conflict for IGIG resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for TERN resolved as shift
    PYC             reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .)
    PARDER          reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .)
    COMA            reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .)
    CORDER          reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .)
    DOSPTS          reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99

  ! MAS             [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]
  ! MENOS           [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]
  ! POR             [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]
  ! DIVIDIDO        [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]
  ! MODULO          [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]
  ! MAYOR           [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]
  ! MENOR           [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]
  ! MAYORIG         [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]
  ! MENORIG         [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]
  ! IGIG            [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]
  ! DIF             [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]
  ! AND             [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]
  ! OR              [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]
  ! TERN            [ reduce using rule 88 (expression -> expression TERN expression DOSPTS expression .) ]


state 214

    (98) listArray -> listArray PUNTO INDEXOF PARIZQ expression . PARDER
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PARDER          shift and go to state 240
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 215

    (99) listArray -> listArray PUNTO POP PARIZQ PARDER .

    PUNTO           reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    CORIZQ          reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    PYC             reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    MAS             reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    MENOS           reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    POR             reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    MODULO          reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    MAYOR           reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    MENOR           reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    MAYORIG         reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    MENORIG         reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    IGIG            reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    DIF             reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    AND             reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    OR              reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    TERN            reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    PARDER          reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    COMA            reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    CORDER          reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)
    DOSPTS          reduce using rule 99 (listArray -> listArray PUNTO POP PARIZQ PARDER .)


state 216

    (100) listArray -> listArray PUNTO JOIN PARIZQ PARDER .

    PUNTO           reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    CORIZQ          reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    PYC             reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    MAS             reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    MENOS           reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    POR             reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    MODULO          reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    MAYOR           reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    MENOR           reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    MAYORIG         reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    MENORIG         reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    IGIG            reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    DIF             reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    AND             reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    OR              reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    TERN            reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    PARDER          reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    COMA            reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    CORDER          reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)
    DOSPTS          reduce using rule 100 (listArray -> listArray PUNTO JOIN PARIZQ PARDER .)


state 217

    (101) listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .

    PUNTO           reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    CORIZQ          reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    PYC             reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    MAS             reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    MENOS           reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    POR             reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    DIVIDIDO        reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    MODULO          reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    MAYOR           reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    MENOR           reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    MAYORIG         reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    MENORIG         reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    IGIG            reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    DIF             reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    AND             reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    OR              reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    TERN            reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    PARDER          reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    COMA            reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    CORDER          reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)
    DOSPTS          reduce using rule 101 (listArray -> listArray PUNTO TOSTRING PARIZQ PARDER .)


state 218

    (24) print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .

    CONSOLE         reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)
    IF              reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)
    FOR             reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)
    SWITCH          reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)
    WHILE           reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)
    VAR             reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)
    CONST           reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)
    ID              reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)
    BREAK           reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)
    CONTINUE        reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)
    FUNC            reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)
    RETURN          reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)
    $end            reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)
    LLAVEDER        reduce using rule 24 (print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC .)


state 219

    (25) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .
    (26) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER . ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER . ELSE block

    CONSOLE         reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    FOR             reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    SWITCH          reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    CONST           reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 25 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    ELSE            shift and go to state 241


state 220

    (28) forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER . LLAVEIZQ block LLAVEDER

    LLAVEIZQ        shift and go to state 242


state 221

    (29) Recurinstruction -> ID MAS . MAS

    MAS             shift and go to state 243


state 222

    (30) Recurinstruction -> ID MENOS . MENOS

    MENOS           shift and go to state 244


state 223

    (40) declaration -> CONST ID DOSPTS type IG . expression PYC
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 206
    listArray                      shift and go to state 61

state 224

    (31) switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .

    CONSOLE         reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)
    IF              reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)
    FOR             reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)
    SWITCH          reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)
    WHILE           reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)
    VAR             reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)
    CONST           reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)
    ID              reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)
    BREAK           reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)
    CONTINUE        reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)
    FUNC            reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)
    RETURN          reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)
    $end            reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)
    LLAVEDER        reduce using rule 31 (switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER .)


state 225

    (32) caseinstruction -> caseinstruction caseindividual .

    LLAVEDER        reduce using rule 32 (caseinstruction -> caseinstruction caseindividual .)
    CASE            reduce using rule 32 (caseinstruction -> caseinstruction caseindividual .)
    DEFAULT         reduce using rule 32 (caseinstruction -> caseinstruction caseindividual .)


state 226

    (34) caseindividual -> cases DOSPTS . block BREAK PYC
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    block                          shift and go to state 245
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 227

    (35) cases -> CASE expression .
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    DOSPTS          reduce using rule 35 (cases -> CASE expression .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 228

    (37) whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .

    CONSOLE         reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    FOR             reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    SWITCH          reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    CONST           reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 37 (whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER .)


state 229

    (38) declaration -> VAR ID DOSPTS type IG expression PYC .

    CONSOLE         reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    IF              reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    FOR             reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    SWITCH          reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    WHILE           reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    VAR             reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    CONST           reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    ID              reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    BREAK           reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    CONTINUE        reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    FUNC            reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    RETURN          reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    $end            reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    NOT             reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    PARIZQ          reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    ENTERO          reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    DECIMAL         reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    BOOLEANO        reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    CADENA          reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    CARACTER        reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    CORIZQ          reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    TYPEOF          reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)
    LLAVEDER        reduce using rule 38 (declaration -> VAR ID DOSPTS type IG expression PYC .)


state 230

    (42) arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG . expression PYC
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 246
    listArray                      shift and go to state 61

state 231

    (65) pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .

    CONSOLE         reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)
    IF              reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)
    FOR             reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)
    SWITCH          reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)
    WHILE           reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)
    VAR             reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)
    CONST           reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)
    ID              reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)
    BREAK           reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)
    CONTINUE        reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)
    FUNC            reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)
    RETURN          reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)
    $end            reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)
    LLAVEDER        reduce using rule 65 (pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC .)


state 232

    (61) toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO . TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO . TOUPPER PARIZQ PARDER PYC

    TOLOWER         shift and go to state 247
    TOUPPER         shift and go to state 248


state 233

    (40) declaration -> CONST ID DOSPTS type IG expression PYC .

    CONSOLE         reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    IF              reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    FOR             reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    SWITCH          reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    WHILE           reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    VAR             reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    CONST           reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    ID              reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    BREAK           reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    CONTINUE        reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    FUNC            reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    RETURN          reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    $end            reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    NOT             reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    PARIZQ          reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    ENTERO          reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    DECIMAL         reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    BOOLEANO        reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    CADENA          reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    CARACTER        reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    CORIZQ          reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    TYPEOF          reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)
    LLAVEDER        reduce using rule 40 (declaration -> CONST ID DOSPTS type IG expression PYC .)


state 234

    (63) parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ . expression PARDER PYC
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 249
    listArray                      shift and go to state 61

state 235

    (64) parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ . expression PARDER PYC
    (73) expression -> . expression MAS expression
    (74) expression -> . expression MENOS expression
    (75) expression -> . expression POR expression
    (76) expression -> . expression DIVIDIDO expression
    (77) expression -> . expression MODULO expression
    (78) expression -> . expression MAYOR expression
    (79) expression -> . expression MENOR expression
    (80) expression -> . expression MAYORIG expression
    (81) expression -> . expression MENORIG expression
    (82) expression -> . expression IGIG expression
    (83) expression -> . expression DIF expression
    (84) expression -> . expression AND expression
    (85) expression -> . expression OR expression
    (86) expression -> . NOT expression
    (87) expression -> . PARIZQ expression PARDER
    (88) expression -> . expression TERN expression DOSPTS expression
    (89) expression -> . ENTERO
    (90) expression -> . DECIMAL
    (91) expression -> . BOOLEANO
    (92) expression -> . CADENA
    (93) expression -> . CARACTER
    (94) expression -> . listArray
    (95) expression -> . CORIZQ expressionList CORDER
    (96) expression -> . ID PARIZQ expressionList PARDER
    (97) expression -> . ID PARIZQ PARDER
    (106) expression -> . TYPEOF ID
    (98) listArray -> . listArray PUNTO INDEXOF PARIZQ expression PARDER
    (99) listArray -> . listArray PUNTO POP PARIZQ PARDER
    (100) listArray -> . listArray PUNTO JOIN PARIZQ PARDER
    (101) listArray -> . listArray PUNTO TOSTRING PARIZQ PARDER
    (102) listArray -> . listArray CORIZQ expression CORDER
    (103) listArray -> . listArray PUNTO LENGTH
    (104) listArray -> . listArray PUNTO ID
    (105) listArray -> . ID

    NOT             shift and go to state 54
    PARIZQ          shift and go to state 55
    ENTERO          shift and go to state 56
    DECIMAL         shift and go to state 57
    BOOLEANO        shift and go to state 58
    CADENA          shift and go to state 59
    CARACTER        shift and go to state 60
    CORIZQ          shift and go to state 62
    ID              shift and go to state 63
    TYPEOF          shift and go to state 64

    expression                     shift and go to state 250
    listArray                      shift and go to state 61

state 236

    (50) functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .

    CONSOLE         reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    FOR             reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    SWITCH          reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    CONST           reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 50 (functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER .)


state 237

    (53) paramsList -> paramsList COMA ID DOSPTS . type
    (66) type -> . NUMBER
    (67) type -> . FLOAT
    (68) type -> . STRING
    (69) type -> . CHAR
    (70) type -> . BOOL

    NUMBER          shift and go to state 115
    FLOAT           shift and go to state 116
    STRING          shift and go to state 117
    CHAR            shift and go to state 118
    BOOL            shift and go to state 119

    type                           shift and go to state 251

state 238

    (55) paramsList -> paramsList ID DOSPTS type . CORIZQ CORDER

    CORIZQ          shift and go to state 252


state 239

    (56) paramsList -> ID DOSPTS type CORIZQ . CORDER

    CORDER          shift and go to state 253


state 240

    (98) listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .

    PUNTO           reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    CORIZQ          reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    PYC             reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    MAS             reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    MENOS           reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    POR             reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    DIVIDIDO        reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    MODULO          reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    MAYOR           reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    MENOR           reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    MAYORIG         reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    MENORIG         reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    IGIG            reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    DIF             reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    AND             reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    OR              reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    TERN            reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    PARDER          reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    COMA            reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    CORDER          reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)
    DOSPTS          reduce using rule 98 (listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER .)


state 241

    (26) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE . LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE . block
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    LLAVEIZQ        shift and go to state 254
    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    block                          shift and go to state 255
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 242

    (28) forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ . block LLAVEDER
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    declaration                    shift and go to state 9
    block                          shift and go to state 256
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 243

    (29) Recurinstruction -> ID MAS MAS .

    PARDER          reduce using rule 29 (Recurinstruction -> ID MAS MAS .)


state 244

    (30) Recurinstruction -> ID MENOS MENOS .

    PARDER          reduce using rule 30 (Recurinstruction -> ID MENOS MENOS .)


state 245

    (34) caseindividual -> cases DOSPTS block . BREAK PYC
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    BREAK           shift and go to state 257
    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    instruccion                    shift and go to state 36
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 246

    (42) arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression . PYC
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PYC             shift and go to state 258
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 247

    (61) toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER . PARIZQ PARDER PYC

    PARIZQ          shift and go to state 259


state 248

    (62) toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER . PARIZQ PARDER PYC

    PARIZQ          shift and go to state 260


state 249

    (63) parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression . PARDER PYC
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PARDER          shift and go to state 261
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 250

    (64) parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression . PARDER PYC
    (73) expression -> expression . MAS expression
    (74) expression -> expression . MENOS expression
    (75) expression -> expression . POR expression
    (76) expression -> expression . DIVIDIDO expression
    (77) expression -> expression . MODULO expression
    (78) expression -> expression . MAYOR expression
    (79) expression -> expression . MENOR expression
    (80) expression -> expression . MAYORIG expression
    (81) expression -> expression . MENORIG expression
    (82) expression -> expression . IGIG expression
    (83) expression -> expression . DIF expression
    (84) expression -> expression . AND expression
    (85) expression -> expression . OR expression
    (88) expression -> expression . TERN expression DOSPTS expression

    PARDER          shift and go to state 262
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    POR             shift and go to state 88
    DIVIDIDO        shift and go to state 89
    MODULO          shift and go to state 90
    MAYOR           shift and go to state 91
    MENOR           shift and go to state 92
    MAYORIG         shift and go to state 93
    MENORIG         shift and go to state 94
    IGIG            shift and go to state 95
    DIF             shift and go to state 96
    AND             shift and go to state 97
    OR              shift and go to state 98
    TERN            shift and go to state 99


state 251

    (53) paramsList -> paramsList COMA ID DOSPTS type .

    PARDER          reduce using rule 53 (paramsList -> paramsList COMA ID DOSPTS type .)
    COMA            reduce using rule 53 (paramsList -> paramsList COMA ID DOSPTS type .)
    ID              reduce using rule 53 (paramsList -> paramsList COMA ID DOSPTS type .)


state 252

    (55) paramsList -> paramsList ID DOSPTS type CORIZQ . CORDER

    CORDER          shift and go to state 263


state 253

    (56) paramsList -> ID DOSPTS type CORIZQ CORDER .

    PARDER          reduce using rule 56 (paramsList -> ID DOSPTS type CORIZQ CORDER .)
    COMA            reduce using rule 56 (paramsList -> ID DOSPTS type CORIZQ CORDER .)
    ID              reduce using rule 56 (paramsList -> ID DOSPTS type CORIZQ CORDER .)


state 254

    (26) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ . block LLAVEDER
    (2) block -> . block instruccion
    (3) block -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    block                          shift and go to state 264
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 255

    (27) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
    $end            reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .)
    LLAVEDER        reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .)
    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

  ! CONSOLE         [ reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .) ]
  ! IF              [ reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .) ]
  ! FOR             [ reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .) ]
  ! SWITCH          [ reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .) ]
  ! WHILE           [ reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .) ]
  ! VAR             [ reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .) ]
  ! CONST           [ reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .) ]
  ! ID              [ reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .) ]
  ! BREAK           [ reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .) ]
  ! CONTINUE        [ reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .) ]
  ! FUNC            [ reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .) ]
  ! RETURN          [ reduce using rule 27 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block .) ]

    instruccion                    shift and go to state 36
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 256

    (28) forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block . LLAVEDER
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    LLAVEDER        shift and go to state 265
    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    declaration                    shift and go to state 9
    instruccion                    shift and go to state 36
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 257

    (34) caseindividual -> cases DOSPTS block BREAK . PYC
    (59) breakstmt -> BREAK . PYC

    PYC             shift and go to state 266


state 258

    (42) arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .

    CONSOLE         reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)
    IF              reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)
    FOR             reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)
    SWITCH          reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)
    WHILE           reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)
    VAR             reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)
    CONST           reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)
    ID              reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)
    BREAK           reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)
    CONTINUE        reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)
    FUNC            reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)
    RETURN          reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)
    $end            reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)
    LLAVEDER        reduce using rule 42 (arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC .)


state 259

    (61) toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ . PARDER PYC

    PARDER          shift and go to state 267


state 260

    (62) toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ . PARDER PYC

    PARDER          shift and go to state 268


state 261

    (63) parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER . PYC

    PYC             shift and go to state 269


state 262

    (64) parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER . PYC

    PYC             shift and go to state 270


state 263

    (55) paramsList -> paramsList ID DOSPTS type CORIZQ CORDER .

    PARDER          reduce using rule 55 (paramsList -> paramsList ID DOSPTS type CORIZQ CORDER .)
    COMA            reduce using rule 55 (paramsList -> paramsList ID DOSPTS type CORIZQ CORDER .)
    ID              reduce using rule 55 (paramsList -> paramsList ID DOSPTS type CORIZQ CORDER .)


state 264

    (26) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block . LLAVEDER
    (2) block -> block . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . ifinstruction
    (6) instruccion -> . forinstruction
    (7) instruccion -> . switchinstruction
    (8) instruccion -> . whileinstruction
    (9) instruccion -> . declaration
    (10) instruccion -> . arraydeclaration
    (11) instruccion -> . assignment
    (12) instruccion -> . assignmentsuma
    (13) instruccion -> . assignmentresta
    (14) instruccion -> . breakstmt
    (15) instruccion -> . continuestmt
    (16) instruccion -> . functionstmt
    (17) instruccion -> . call
    (18) instruccion -> . returnstmt
    (19) instruccion -> . toLowerinstruction
    (20) instruccion -> . toUpperinstruction
    (21) instruccion -> . parseintinstruction
    (22) instruccion -> . parsefloatinstruction
    (23) instruccion -> . pushinstruction
    (24) print -> . CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC
    (25) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (26) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER
    (27) ifinstruction -> . IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block
    (28) forinstruction -> . FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER
    (31) switchinstruction -> . SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER
    (37) whileinstruction -> . WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER
    (38) declaration -> . VAR ID DOSPTS type IG expression PYC
    (39) declaration -> . VAR ID IG expression PYC
    (40) declaration -> . CONST ID DOSPTS type IG expression PYC
    (41) declaration -> . CONST ID IG expression PYC
    (42) arraydeclaration -> . VAR ID DOSPTS type CORIZQ CORDER IG expression PYC
    (43) assignment -> . ID IG expression PYC
    (44) assignmentsuma -> . ID MAS IG expression PYC
    (45) assignmentresta -> . ID MENOS IG expression PYC
    (59) breakstmt -> . BREAK PYC
    (60) continuestmt -> . CONTINUE PYC
    (50) functionstmt -> . FUNC ID funcparams functype LLAVEIZQ block LLAVEDER
    (48) call -> . ID PARIZQ expressionList PARDER PYC
    (49) call -> . ID PARIZQ PARDER PYC
    (46) returnstmt -> . RETURN expression PYC
    (47) returnstmt -> . RETURN PYC
    (61) toLowerinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC
    (62) toUpperinstruction -> . CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC
    (63) parseintinstruction -> . CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC
    (64) parsefloatinstruction -> . CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC
    (65) pushinstruction -> . ID PUNTO PUSH PARIZQ expression PARDER PYC

    LLAVEDER        shift and go to state 271
    CONSOLE         shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    SWITCH          shift and go to state 27
    WHILE           shift and go to state 28
    VAR             shift and go to state 29
    CONST           shift and go to state 31
    ID              shift and go to state 30
    BREAK           shift and go to state 32
    CONTINUE        shift and go to state 33
    FUNC            shift and go to state 34
    RETURN          shift and go to state 35

    instruccion                    shift and go to state 36
    print                          shift and go to state 4
    ifinstruction                  shift and go to state 5
    forinstruction                 shift and go to state 6
    switchinstruction              shift and go to state 7
    whileinstruction               shift and go to state 8
    declaration                    shift and go to state 9
    arraydeclaration               shift and go to state 10
    assignment                     shift and go to state 11
    assignmentsuma                 shift and go to state 12
    assignmentresta                shift and go to state 13
    breakstmt                      shift and go to state 14
    continuestmt                   shift and go to state 15
    functionstmt                   shift and go to state 16
    call                           shift and go to state 17
    returnstmt                     shift and go to state 18
    toLowerinstruction             shift and go to state 19
    toUpperinstruction             shift and go to state 20
    parseintinstruction            shift and go to state 21
    parsefloatinstruction          shift and go to state 22
    pushinstruction                shift and go to state 23

state 265

    (28) forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .

    CONSOLE         reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)
    FOR             reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)
    SWITCH          reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)
    CONST           reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 28 (forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER .)


state 266

    (34) caseindividual -> cases DOSPTS block BREAK PYC .
    (59) breakstmt -> BREAK PYC .

    LLAVEDER        reduce using rule 34 (caseindividual -> cases DOSPTS block BREAK PYC .)
    CASE            reduce using rule 34 (caseindividual -> cases DOSPTS block BREAK PYC .)
    DEFAULT         reduce using rule 34 (caseindividual -> cases DOSPTS block BREAK PYC .)
    BREAK           reduce using rule 59 (breakstmt -> BREAK PYC .)
    CONSOLE         reduce using rule 59 (breakstmt -> BREAK PYC .)
    IF              reduce using rule 59 (breakstmt -> BREAK PYC .)
    FOR             reduce using rule 59 (breakstmt -> BREAK PYC .)
    SWITCH          reduce using rule 59 (breakstmt -> BREAK PYC .)
    WHILE           reduce using rule 59 (breakstmt -> BREAK PYC .)
    VAR             reduce using rule 59 (breakstmt -> BREAK PYC .)
    CONST           reduce using rule 59 (breakstmt -> BREAK PYC .)
    ID              reduce using rule 59 (breakstmt -> BREAK PYC .)
    CONTINUE        reduce using rule 59 (breakstmt -> BREAK PYC .)
    FUNC            reduce using rule 59 (breakstmt -> BREAK PYC .)
    RETURN          reduce using rule 59 (breakstmt -> BREAK PYC .)


state 267

    (61) toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER . PYC

    PYC             shift and go to state 272


state 268

    (62) toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER . PYC

    PYC             shift and go to state 273


state 269

    (63) parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .

    CONSOLE         reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)
    IF              reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)
    FOR             reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)
    SWITCH          reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)
    WHILE           reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)
    VAR             reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)
    CONST           reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)
    ID              reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)
    BREAK           reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)
    CONTINUE        reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)
    FUNC            reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)
    RETURN          reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)
    $end            reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)
    LLAVEDER        reduce using rule 63 (parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC .)


state 270

    (64) parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .

    CONSOLE         reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)
    IF              reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)
    FOR             reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)
    SWITCH          reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)
    WHILE           reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)
    VAR             reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)
    CONST           reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)
    ID              reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)
    BREAK           reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)
    CONTINUE        reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)
    FUNC            reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)
    RETURN          reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)
    $end            reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)
    LLAVEDER        reduce using rule 64 (parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC .)


state 271

    (26) ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .

    CONSOLE         reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    IF              reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    FOR             reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    SWITCH          reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    WHILE           reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    VAR             reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    CONST           reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    ID              reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    BREAK           reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    CONTINUE        reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    FUNC            reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    RETURN          reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    $end            reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)
    LLAVEDER        reduce using rule 26 (ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER .)


state 272

    (61) toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .

    CONSOLE         reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)
    IF              reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)
    FOR             reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)
    SWITCH          reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)
    WHILE           reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)
    VAR             reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)
    CONST           reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)
    ID              reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)
    BREAK           reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)
    CONTINUE        reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)
    FUNC            reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)
    RETURN          reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)
    $end            reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)
    LLAVEDER        reduce using rule 61 (toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC .)


state 273

    (62) toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .

    CONSOLE         reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)
    IF              reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)
    FOR             reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)
    SWITCH          reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)
    WHILE           reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)
    VAR             reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)
    CONST           reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)
    ID              reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)
    BREAK           reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)
    CONTINUE        reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)
    FUNC            reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)
    RETURN          reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)
    $end            reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)
    LLAVEDER        reduce using rule 62 (toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAS in state 100 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 100 resolved as shift
WARNING: shift/reduce conflict for POR in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 100 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 100 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 100 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 100 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 100 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 100 resolved as shift
WARNING: shift/reduce conflict for IGIG in state 100 resolved as shift
WARNING: shift/reduce conflict for DIF in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for OR in state 100 resolved as shift
WARNING: shift/reduce conflict for TERN in state 100 resolved as shift
WARNING: shift/reduce conflict for MAS in state 139 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 139 resolved as shift
WARNING: shift/reduce conflict for POR in state 139 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 139 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 139 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 139 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 139 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 139 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 139 resolved as shift
WARNING: shift/reduce conflict for IGIG in state 139 resolved as shift
WARNING: shift/reduce conflict for DIF in state 139 resolved as shift
WARNING: shift/reduce conflict for AND in state 139 resolved as shift
WARNING: shift/reduce conflict for OR in state 139 resolved as shift
WARNING: shift/reduce conflict for TERN in state 139 resolved as shift
WARNING: shift/reduce conflict for PUNTO in state 205 resolved as shift
WARNING: shift/reduce conflict for MAS in state 213 resolved as shift
WARNING: shift/reduce conflict for MENOS in state 213 resolved as shift
WARNING: shift/reduce conflict for POR in state 213 resolved as shift
WARNING: shift/reduce conflict for DIVIDIDO in state 213 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 213 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 213 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 213 resolved as shift
WARNING: shift/reduce conflict for MAYORIG in state 213 resolved as shift
WARNING: shift/reduce conflict for MENORIG in state 213 resolved as shift
WARNING: shift/reduce conflict for IGIG in state 213 resolved as shift
WARNING: shift/reduce conflict for DIF in state 213 resolved as shift
WARNING: shift/reduce conflict for AND in state 213 resolved as shift
WARNING: shift/reduce conflict for OR in state 213 resolved as shift
WARNING: shift/reduce conflict for TERN in state 213 resolved as shift
WARNING: shift/reduce conflict for CONSOLE in state 255 resolved as shift
WARNING: shift/reduce conflict for IF in state 255 resolved as shift
WARNING: shift/reduce conflict for FOR in state 255 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 255 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 255 resolved as shift
WARNING: shift/reduce conflict for VAR in state 255 resolved as shift
WARNING: shift/reduce conflict for CONST in state 255 resolved as shift
WARNING: shift/reduce conflict for ID in state 255 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 255 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 255 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 255 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 255 resolved as shift

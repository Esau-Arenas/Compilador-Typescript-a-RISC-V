
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftIGIGDIFleftMENORMAYORleftMENORIGMAYORIGleftMASMENOSleftPORDIVIDIDOAND BOOL BOOLEANO BREAK CADENA CARACTER CASE CHAR COMA CONSOLE CONST CONTINUE CORDER CORIZQ DECIMAL DEFAULT DIF DIVIDIDO DOSPTS ELSE ENTERO FLOAT FOR FUNC ID IF IG IGIG INDEXOF INTERFACE JOIN KEYS LENGTH LET LLAVEDER LLAVEIZQ LOG MAS MAYOR MAYORIG MENOR MENORIG MENOS MODULO NOT NUMBER OBJECT OR PARDER PARIZQ PARSEFLOAT PARSEINT POP POR PUNTO PUSH PYC RETURN STRING SWITCH TERN TOLOWER TOSTRING TOUPPER TYPEOF VALUES VAR WHILEs : blockblock : block instruccion\n            | instruccion instruccion : print\n                | ifinstruction\n                | forinstruction\n                | switchinstruction\n                | whileinstruction \n                | declaration\n                | arraydeclaration\n                | matrixdeclaration\n                | assignment\n                | assignmentsuma\n                | assignmentresta\n                | breakstmt\n                | continuestmt\n                | functionstmt\n                | call\n                | returnstmt\n                | interfacecreation\n                | interdeclaration\n                | toLowerinstruction\n                | toUpperinstruction\n                | parseintinstruction\n                | parsefloatinstruction\n                | pushinstructionprint : CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYCifinstruction : IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER\n                    | IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER\n                    | IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block\n                    forinstruction : FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDERRecurinstruction : ID MAS MAS\n                        | ID MENOS MENOSswitchinstruction : SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDERcaseinstruction : caseinstruction caseindividual\n                       | caseindividualcaseindividual : cases DOSPTS block BREAK PYCcases : CASE expression\n              | DEFAULT whileinstruction : WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDERdeclaration : VAR ID DOSPTS type IG expression PYC\n                    | VAR ID IG expression PYC\n                    | CONST ID DOSPTS type IG expression PYC\n                    | CONST ID IG expression PYCarraydeclaration : VAR ID DOSPTS type CORIZQ CORDER IG expression PYCmatrixdeclaration : CONST ID DOSPTS type corchetes IG matrixexpression PYC\n                        | VAR ID DOSPTS type corchetes IG matrixexpression PYCcorchetes : corchetes CORIZQ CORDER\n              | CORIZQ CORDER matrixexpression : CORIZQ CORDERmatrixexpression : CORIZQ list_elements CORDERlist_elements : list_elements COMA value\n                    | value value : ENTEROvalue : matrixexpressionlistaindices : listaindices indice\n                    | indiceindice : CORIZQ ENTERO CORDERinterdeclaration : VAR ID DOSPTS ID IG LLAVEIZQ interfaceContent LLAVEDER PYC\n                        | CONST ID DOSPTS ID IG LLAVEIZQ interfaceContent LLAVEDER PYCinterfaceContent : interfaceContent COMA ID DOSPTS expression\n                | ID DOSPTS expressionassignment : ID  IG expression PYCassignmentsuma : ID MAS IG expression PYCassignmentresta : ID MENOS IG expression PYCreturnstmt : RETURN expression PYC\n                | RETURN PYCcall : ID PARIZQ expressionList PARDER PYC\n            | ID PARIZQ PARDER PYCinterfacecreation : INTERFACE ID LLAVEIZQ attributeList LLAVEDER PYCattributeList : attributeList ID DOSPTS type PYC\n                | attributeList ID DOSPTS ID PYC\n                | ID DOSPTS ID PYC\n                | ID DOSPTS type PYCfunctionstmt : FUNC ID funcparams functype LLAVEIZQ block LLAVEDERfuncparams : PARIZQ paramsList PARDER\n                |  PARIZQ PARDERparamsList : paramsList COMA ID DOSPTS type\n                | ID DOSPTS type\n                | paramsList ID DOSPTS type CORIZQ CORDER\n                | ID DOSPTS type CORIZQ CORDERfunctype : DOSPTS type\n                | breakstmt : BREAK PYCcontinuestmt : CONTINUE PYCtoLowerinstruction : CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYCtoUpperinstruction : CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYCparseintinstruction : CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYCparsefloatinstruction : CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYCpushinstruction : ID PUNTO PUSH PARIZQ expression PARDER PYCtype : NUMBER\n            | FLOAT\n            | STRING\n            | CHAR\n            | BOOLexpressionList : expressionList COMA expression\n                    | expression expression : expression MAS expressionexpression : expression MENOS expressionexpression : expression POR expressionexpression : expression DIVIDIDO expressionexpression : expression MODULO expressionexpression : expression MAYOR expressionexpression : expression MENOR expressionexpression : expression MAYORIG expressionexpression : expression MENORIG expressionexpression : expression IGIG expressionexpression : expression DIF expressionexpression : expression AND expressionexpression : expression OR expressionexpression : NOT expressionexpression : PARIZQ expression PARDERexpression : expression TERN expression DOSPTS expressionexpression   : ENTERO\n                    | DECIMAL\n                    | BOOLEANO\n                    | CADENA \n                    | CARACTER\n                    | listArrayexpression : CORIZQ expressionList CORDERexpression : ID PARIZQ expressionList PARDER\n            | ID PARIZQ PARDERlistArray : listArray PUNTO INDEXOF PARIZQ expression PARDER \n                | listArray PUNTO POP PARIZQ PARDER\n                | listArray PUNTO JOIN PARIZQ PARDER\n                | listArray PUNTO TOSTRING PARIZQ PARDER\n                | listArray CORIZQ expression CORDER\n                | listArray PUNTO LENGTH\n                | listArray PUNTO ID\n                | IDexpression : TYPEOF IDexpression : OBJECT PUNTO KEYS PARIZQ expression PARDER\n                | OBJECT PUNTO VALUES PARIZQ expression PARDER'
    
_lr_action_items = {'CONSOLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,53,54,57,91,130,135,175,180,185,186,187,188,195,196,215,225,239,253,254,255,260,262,264,267,272,275,279,290,291,294,299,310,316,317,318,321,323,326,332,333,334,339,340,341,343,344,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,-84,-85,-67,-66,-63,-69,27,27,-42,-64,-65,-68,-44,27,27,27,27,-70,-27,-28,-34,27,-40,-41,-90,-43,-75,27,27,27,-47,-46,27,27,27,-59,-45,-60,27,-31,-84,-88,-89,-29,-86,-87,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,53,54,57,91,130,135,175,180,185,186,187,188,195,196,215,225,239,253,254,255,260,262,264,267,272,275,279,290,291,294,299,310,316,317,318,321,323,326,332,333,334,339,340,341,343,344,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,-84,-85,-67,-66,-63,-69,28,28,-42,-64,-65,-68,-44,28,28,28,28,-70,-27,-28,-34,28,-40,-41,-90,-43,-75,28,28,28,-47,-46,28,28,28,-59,-45,-60,28,-31,-84,-88,-89,-29,-86,-87,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,53,54,57,91,130,135,175,180,185,186,187,188,195,196,215,225,239,253,254,255,260,262,264,267,272,275,279,290,291,294,299,310,316,317,318,321,323,326,332,333,334,339,340,341,343,344,],[29,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,-84,-85,-67,-66,-63,-69,29,29,-42,-64,-65,-68,-44,29,29,29,29,-70,-27,-28,-34,29,-40,-41,-90,-43,-75,29,29,29,-47,-46,29,29,29,-59,-45,-60,29,-31,-84,-88,-89,-29,-86,-87,]),'SWITCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,53,54,57,91,130,135,175,180,185,186,187,188,195,196,215,225,239,253,254,255,260,262,264,267,272,275,279,290,291,294,299,310,316,317,318,321,323,326,332,333,334,339,340,341,343,344,],[30,30,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,-84,-85,-67,-66,-63,-69,30,30,-42,-64,-65,-68,-44,30,30,30,30,-70,-27,-28,-34,30,-40,-41,-90,-43,-75,30,30,30,-47,-46,30,30,30,-59,-45,-60,30,-31,-84,-88,-89,-29,-86,-87,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,53,54,57,91,130,135,175,180,185,186,187,188,195,196,215,225,239,253,254,255,260,262,264,267,272,275,279,290,291,294,299,310,316,317,318,321,323,326,332,333,334,339,340,341,343,344,],[31,31,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,-84,-85,-67,-66,-63,-69,31,31,-42,-64,-65,-68,-44,31,31,31,31,-70,-27,-28,-34,31,-40,-41,-90,-43,-75,31,31,31,-47,-46,31,31,31,-59,-45,-60,31,-31,-84,-88,-89,-29,-86,-87,]),'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,43,53,54,57,91,130,135,175,180,185,186,187,188,195,196,215,225,239,253,254,255,260,262,264,267,272,275,279,290,291,294,299,310,316,317,318,321,323,326,332,333,334,339,340,341,343,344,],[32,32,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,74,-84,-85,-67,-66,-63,-69,32,32,-42,-64,-65,-68,-44,32,32,32,32,-70,-27,-28,-34,32,-40,-41,-90,-43,-75,32,32,32,-47,-46,32,32,32,-59,-45,-60,32,-31,-84,-88,-89,-29,-86,-87,]),'CONST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,43,53,54,57,91,130,135,175,180,185,186,187,188,195,196,215,225,239,253,254,255,260,262,264,267,272,275,279,290,291,294,299,310,316,317,318,321,323,326,332,333,334,339,340,341,343,344,],[34,34,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,75,-84,-85,-67,-66,-63,-69,34,34,-42,-64,-65,-68,-44,34,34,34,34,-70,-27,-28,-34,34,-40,-41,-90,-43,-75,34,34,34,-47,-46,34,34,34,-59,-45,-60,34,-31,-84,-88,-89,-29,-86,-87,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,32,34,37,38,39,40,42,44,45,47,50,53,54,57,58,59,66,68,73,74,75,78,79,81,82,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,108,109,111,114,115,124,125,126,127,128,130,134,135,136,142,173,175,176,180,182,185,186,187,188,192,195,196,199,202,203,209,210,211,215,223,225,226,232,239,242,252,253,254,255,259,260,262,264,267,268,272,275,276,277,279,286,287,290,291,294,295,297,299,310,311,313,314,315,316,317,318,321,323,326,331,332,333,334,335,339,340,341,343,344,],[33,33,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,46,52,55,67,70,-2,67,67,67,67,67,-84,-85,-67,67,67,67,112,67,118,119,122,67,67,67,137,67,144,-66,67,67,67,67,67,67,67,67,67,67,67,67,67,67,165,67,67,172,67,-91,-92,-93,-94,-95,-63,67,-69,67,200,212,33,217,33,67,-42,-64,-65,-68,233,-44,33,240,67,67,67,67,250,33,67,33,265,265,33,-79,288,-70,-27,-28,67,-34,33,-40,-41,67,-90,-43,67,67,-75,-73,-74,33,33,33,67,322,-47,-46,-78,-81,-72,-71,33,33,33,-59,-45,-60,-80,33,-31,-84,67,-88,-89,-29,-86,-87,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,53,54,57,91,130,135,175,180,185,186,187,188,195,196,215,225,239,253,254,255,260,262,264,267,272,275,279,290,291,294,299,310,316,317,318,321,323,326,332,333,334,339,340,341,343,344,],[35,35,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,-84,-85,-67,-66,-63,-69,35,35,-42,-64,-65,-68,-44,35,35,35,35,-70,-27,-28,-34,35,-40,-41,-90,-43,-75,35,35,319,-47,-46,35,35,35,-59,-45,-60,35,-31,-84,-88,-89,-29,-86,-87,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,53,54,57,91,130,135,175,180,185,186,187,188,195,196,215,225,239,253,254,255,260,262,264,267,272,275,279,290,291,294,299,310,316,317,318,321,323,326,332,333,334,339,340,341,343,344,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,-84,-85,-67,-66,-63,-69,36,36,-42,-64,-65,-68,-44,36,36,36,36,-70,-27,-28,-34,36,-40,-41,-90,-43,-75,36,36,36,-47,-46,36,36,36,-59,-45,-60,36,-31,-84,-88,-89,-29,-86,-87,]),'FUNC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,53,54,57,91,130,135,175,180,185,186,187,188,195,196,215,225,239,253,254,255,260,262,264,267,272,275,279,290,291,294,299,310,316,317,318,321,323,326,332,333,334,339,340,341,343,344,],[37,37,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,-84,-85,-67,-66,-63,-69,37,37,-42,-64,-65,-68,-44,37,37,37,37,-70,-27,-28,-34,37,-40,-41,-90,-43,-75,37,37,37,-47,-46,37,37,37,-59,-45,-60,37,-31,-84,-88,-89,-29,-86,-87,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,53,54,57,91,130,135,175,180,185,186,187,188,195,196,215,225,239,253,254,255,260,262,264,267,272,275,279,290,291,294,299,310,316,317,318,321,323,326,332,333,334,339,340,341,343,344,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,-84,-85,-67,-66,-63,-69,38,38,-42,-64,-65,-68,-44,38,38,38,38,-70,-27,-28,-34,38,-40,-41,-90,-43,-75,38,38,38,-47,-46,38,38,38,-59,-45,-60,38,-31,-84,-88,-89,-29,-86,-87,]),'INTERFACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,53,54,57,91,130,135,175,180,185,186,187,188,195,196,215,225,239,253,254,255,260,262,264,267,272,275,279,290,291,294,299,310,316,317,318,321,323,326,332,333,334,339,340,341,343,344,],[39,39,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,-84,-85,-67,-66,-63,-69,39,39,-42,-64,-65,-68,-44,39,39,39,39,-70,-27,-28,-34,39,-40,-41,-90,-43,-75,39,39,39,-47,-46,39,39,39,-59,-45,-60,39,-31,-84,-88,-89,-29,-86,-87,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,53,54,57,91,130,135,185,186,187,188,195,253,254,255,260,264,267,272,275,279,299,310,317,321,323,326,333,339,340,341,343,344,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,-84,-85,-67,-66,-63,-69,-42,-64,-65,-68,-44,-70,-27,-28,-34,-40,-41,-90,-43,-75,-47,-46,-30,-59,-45,-60,-31,-88,-89,-29,-86,-87,]),'LLAVEDER':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,40,53,54,57,60,61,62,63,64,65,67,91,106,112,130,135,145,146,147,148,149,150,151,152,153,154,155,156,157,159,164,165,167,169,173,185,186,187,188,195,207,208,215,220,221,225,239,243,245,246,247,253,254,255,260,261,264,266,267,272,273,275,279,283,284,285,286,287,299,310,314,315,317,318,320,321,323,326,332,333,334,339,340,341,342,343,344,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-2,-84,-85,-67,-114,-115,-116,-117,-118,-119,-130,-66,-111,-131,-63,-69,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-112,-128,-129,-120,-122,213,-42,-64,-65,-68,-44,-127,-121,255,260,-36,264,279,-113,-124,-125,-126,-70,-27,-28,-34,-35,-40,296,-41,-90,305,-43,-75,-123,-132,-133,-73,-74,-47,-46,-72,-71,-30,333,-62,-59,-45,-60,341,-31,-37,-88,-89,-29,-61,-86,-87,]),'PUNTO':([27,33,65,67,69,164,165,207,233,245,246,247,283,],[41,51,108,-130,113,-128,-129,-127,274,-124,-125,-126,-123,]),'PARIZQ':([28,29,30,31,33,38,42,44,45,47,50,55,58,59,66,67,71,73,79,81,82,86,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,111,115,134,136,160,161,162,163,170,171,182,185,192,195,202,203,209,210,223,233,235,236,259,267,268,275,276,277,295,306,307,335,],[42,43,44,45,50,59,59,59,59,59,59,90,59,59,59,111,115,59,59,59,59,136,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,203,204,205,206,209,210,59,-42,59,-44,59,59,59,59,59,111,276,277,59,-41,59,-43,59,59,59,327,328,59,]),'IG':([33,46,48,49,52,118,119,122,123,124,125,126,127,128,137,138,184,193,218,219,228,238,271,],[47,79,81,82,88,79,88,181,182,-91,-92,-93,-94,-95,191,192,229,237,182,259,268,-49,-48,]),'MAS':([33,56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,217,227,233,234,243,244,245,246,247,248,249,257,263,283,284,285,298,308,309,320,342,],[48,92,-114,-115,-116,-117,-118,-119,-130,92,92,92,92,92,92,92,-131,92,92,92,92,92,-98,-99,-100,-101,92,92,92,92,92,92,92,92,92,92,-112,-128,-129,92,-120,-122,92,92,-127,-121,257,92,-130,92,92,92,-124,-125,-126,92,92,292,92,-123,-132,-133,92,92,92,92,92,]),'MENOS':([33,56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,217,227,233,234,243,244,245,246,247,248,249,258,263,283,284,285,298,308,309,320,342,],[49,93,-114,-115,-116,-117,-118,-119,-130,93,93,93,93,93,93,93,-131,93,93,93,93,93,-98,-99,-100,-101,93,93,93,93,93,93,93,93,93,93,-112,-128,-129,93,-120,-122,93,93,-127,-121,258,93,-130,93,93,93,-124,-125,-126,93,93,293,93,-123,-132,-133,93,93,93,93,93,]),'PYC':([35,36,38,56,60,61,62,63,64,65,67,80,84,106,112,117,124,125,126,127,128,129,131,132,133,139,145,146,147,148,149,150,151,152,153,154,155,156,157,159,164,165,167,169,207,208,213,214,227,231,233,234,243,245,246,247,250,251,269,278,283,284,285,288,289,296,298,300,305,319,324,329,330,337,338,],[53,54,57,91,-114,-115,-116,-117,-118,-119,-130,130,135,-111,-131,176,-91,-92,-93,-94,-95,185,186,187,188,195,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-112,-128,-129,-120,-122,-127,-121,253,254,267,272,-130,275,-113,-124,-125,-126,286,287,299,310,-123,-132,-133,314,315,321,323,-50,326,334,-51,339,340,343,344,]),'NOT':([38,42,44,45,47,50,58,59,66,73,79,81,82,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,111,115,134,136,182,185,192,195,202,203,209,210,223,259,267,268,275,276,277,295,335,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-42,58,-44,58,58,58,58,58,58,-41,58,-43,58,58,58,58,]),'ENTERO':([38,42,44,45,47,50,58,59,66,73,79,81,82,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,111,115,134,136,182,185,192,195,202,203,209,210,223,259,267,268,270,275,276,277,295,325,335,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-42,60,-44,60,60,60,60,60,60,-41,60,303,-43,60,60,60,303,60,]),'DECIMAL':([38,42,44,45,47,50,58,59,66,73,79,81,82,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,111,115,134,136,182,185,192,195,202,203,209,210,223,259,267,268,275,276,277,295,335,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-42,61,-44,61,61,61,61,61,61,-41,61,-43,61,61,61,61,]),'BOOLEANO':([38,42,44,45,47,50,58,59,66,73,79,81,82,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,111,115,134,136,182,185,192,195,202,203,209,210,223,259,267,268,275,276,277,295,335,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-42,62,-44,62,62,62,62,62,62,-41,62,-43,62,62,62,62,]),'CADENA':([38,42,44,45,47,50,58,59,66,73,79,81,82,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,111,115,134,136,182,185,192,195,202,203,209,210,223,259,267,268,275,276,277,295,335,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-42,63,-44,63,63,63,63,63,63,-41,63,-43,63,63,63,63,]),'CARACTER':([38,42,44,45,47,50,58,59,66,73,79,81,82,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,111,115,134,136,182,185,192,195,202,203,209,210,223,259,267,268,275,276,277,295,335,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-42,64,-44,64,64,64,64,64,64,-41,64,-43,64,64,64,64,]),'CORIZQ':([38,42,44,45,47,50,58,59,65,66,67,73,79,81,82,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,111,115,123,124,125,126,127,128,134,136,138,164,165,182,184,185,192,193,195,202,203,207,209,210,223,228,229,233,237,238,242,245,246,247,259,267,268,270,271,275,276,277,281,283,295,325,335,],[66,66,66,66,66,66,66,66,109,66,-130,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,183,-91,-92,-93,-94,-95,66,66,194,-128,-129,66,230,-42,66,230,-44,66,66,-127,66,66,66,-49,270,-130,270,-49,282,-124,-125,-126,66,-41,66,270,-48,-43,66,66,312,-123,66,270,66,]),'TYPEOF':([38,42,44,45,47,50,58,59,66,73,79,81,82,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,111,115,134,136,182,185,192,195,202,203,209,210,223,259,267,268,275,276,277,295,335,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-42,68,-44,68,68,68,68,68,68,-41,68,-43,68,68,68,68,]),'OBJECT':([38,42,44,45,47,50,58,59,66,73,79,81,82,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,111,115,134,136,182,185,192,195,202,203,209,210,223,259,267,268,275,276,277,295,335,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-42,69,-44,69,69,69,69,69,69,-41,69,-43,69,69,69,69,]),'LOG':([41,],[71,]),'DOSPTS':([46,52,60,61,62,63,64,65,67,89,106,112,118,119,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,167,169,172,198,200,207,208,212,222,224,240,243,245,246,247,263,265,283,284,285,322,],[78,87,-114,-115,-116,-117,-118,-119,-130,141,-111,-131,177,178,-77,201,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,202,-112,-128,-129,-120,-122,211,-76,241,-127,-121,252,262,-39,280,-113,-124,-125,-126,-38,295,-123,-132,-133,335,]),'PARDER':([50,60,61,62,63,64,65,67,72,76,77,83,85,90,106,107,111,112,124,125,126,127,128,142,145,146,147,148,149,150,151,152,153,154,155,156,157,159,164,165,167,168,169,174,189,190,204,205,206,207,208,216,242,243,244,245,246,247,248,249,283,284,285,292,293,308,309,311,313,327,328,331,],[84,-114,-115,-116,-117,-118,-119,-130,116,120,121,133,-97,143,-111,159,169,-131,-91,-92,-93,-94,-95,198,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-112,-128,-129,-120,208,-122,214,-96,231,245,246,247,-127,-121,256,-79,-113,283,-124,-125,-126,284,285,-123,-132,-133,-32,-33,329,330,-78,-81,337,338,-80,]),'PUSH':([51,],[86,]),'POR':([56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,227,233,234,243,244,245,246,247,248,249,263,283,284,285,298,308,309,320,342,],[94,-114,-115,-116,-117,-118,-119,-130,94,94,94,94,94,94,94,-131,94,94,94,94,94,94,94,-100,-101,94,94,94,94,94,94,94,94,94,94,-112,-128,-129,94,-120,-122,94,94,-127,-121,94,-130,94,94,94,-124,-125,-126,94,94,94,-123,-132,-133,94,94,94,94,94,]),'DIVIDIDO':([56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,227,233,234,243,244,245,246,247,248,249,263,283,284,285,298,308,309,320,342,],[95,-114,-115,-116,-117,-118,-119,-130,95,95,95,95,95,95,95,-131,95,95,95,95,95,95,95,-100,-101,95,95,95,95,95,95,95,95,95,95,-112,-128,-129,95,-120,-122,95,95,-127,-121,95,-130,95,95,95,-124,-125,-126,95,95,95,-123,-132,-133,95,95,95,95,95,]),'MODULO':([56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,227,233,234,243,244,245,246,247,248,249,263,283,284,285,298,308,309,320,342,],[96,-114,-115,-116,-117,-118,-119,-130,96,96,96,96,96,96,96,-131,96,96,96,96,96,-98,-99,-100,-101,96,-103,-104,-105,-106,-107,-108,-109,-110,96,-112,-128,-129,96,-120,-122,96,96,-127,-121,96,-130,96,96,96,-124,-125,-126,96,96,96,-123,-132,-133,96,96,96,96,96,]),'MAYOR':([56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,227,233,234,243,244,245,246,247,248,249,263,283,284,285,298,308,309,320,342,],[97,-114,-115,-116,-117,-118,-119,-130,97,97,97,97,97,97,97,-131,97,97,97,97,97,-98,-99,-100,-101,97,-103,-104,-105,-106,97,97,97,97,97,-112,-128,-129,97,-120,-122,97,97,-127,-121,97,-130,97,97,97,-124,-125,-126,97,97,97,-123,-132,-133,97,97,97,97,97,]),'MENOR':([56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,227,233,234,243,244,245,246,247,248,249,263,283,284,285,298,308,309,320,342,],[98,-114,-115,-116,-117,-118,-119,-130,98,98,98,98,98,98,98,-131,98,98,98,98,98,-98,-99,-100,-101,98,-103,-104,-105,-106,98,98,98,98,98,-112,-128,-129,98,-120,-122,98,98,-127,-121,98,-130,98,98,98,-124,-125,-126,98,98,98,-123,-132,-133,98,98,98,98,98,]),'MAYORIG':([56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,227,233,234,243,244,245,246,247,248,249,263,283,284,285,298,308,309,320,342,],[99,-114,-115,-116,-117,-118,-119,-130,99,99,99,99,99,99,99,-131,99,99,99,99,99,-98,-99,-100,-101,99,99,99,-105,-106,99,99,99,99,99,-112,-128,-129,99,-120,-122,99,99,-127,-121,99,-130,99,99,99,-124,-125,-126,99,99,99,-123,-132,-133,99,99,99,99,99,]),'MENORIG':([56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,227,233,234,243,244,245,246,247,248,249,263,283,284,285,298,308,309,320,342,],[100,-114,-115,-116,-117,-118,-119,-130,100,100,100,100,100,100,100,-131,100,100,100,100,100,-98,-99,-100,-101,100,100,100,-105,-106,100,100,100,100,100,-112,-128,-129,100,-120,-122,100,100,-127,-121,100,-130,100,100,100,-124,-125,-126,100,100,100,-123,-132,-133,100,100,100,100,100,]),'IGIG':([56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,227,233,234,243,244,245,246,247,248,249,263,283,284,285,298,308,309,320,342,],[101,-114,-115,-116,-117,-118,-119,-130,101,101,101,101,101,101,101,-131,101,101,101,101,101,-98,-99,-100,-101,101,-103,-104,-105,-106,-107,-108,101,101,101,-112,-128,-129,101,-120,-122,101,101,-127,-121,101,-130,101,101,101,-124,-125,-126,101,101,101,-123,-132,-133,101,101,101,101,101,]),'DIF':([56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,227,233,234,243,244,245,246,247,248,249,263,283,284,285,298,308,309,320,342,],[102,-114,-115,-116,-117,-118,-119,-130,102,102,102,102,102,102,102,-131,102,102,102,102,102,-98,-99,-100,-101,102,-103,-104,-105,-106,-107,-108,102,102,102,-112,-128,-129,102,-120,-122,102,102,-127,-121,102,-130,102,102,102,-124,-125,-126,102,102,102,-123,-132,-133,102,102,102,102,102,]),'AND':([56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,227,233,234,243,244,245,246,247,248,249,263,283,284,285,298,308,309,320,342,],[103,-114,-115,-116,-117,-118,-119,-130,103,103,103,103,103,103,103,-131,103,103,103,103,103,-98,-99,-100,-101,103,-103,-104,-105,-106,-107,-108,-109,103,103,-112,-128,-129,103,-120,-122,103,103,-127,-121,103,-130,103,103,103,-124,-125,-126,103,103,103,-123,-132,-133,103,103,103,103,103,]),'OR':([56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,227,233,234,243,244,245,246,247,248,249,263,283,284,285,298,308,309,320,342,],[104,-114,-115,-116,-117,-118,-119,-130,104,104,104,104,104,104,104,-131,104,104,104,104,104,-98,-99,-100,-101,104,-103,-104,-105,-106,-107,-108,-109,-110,104,-112,-128,-129,104,-120,-122,104,104,-127,-121,104,-130,104,104,104,-124,-125,-126,104,104,104,-123,-132,-133,104,104,104,104,104,]),'TERN':([56,60,61,62,63,64,65,67,72,76,77,80,85,106,107,112,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,164,165,166,167,169,189,190,207,208,227,233,234,243,244,245,246,247,248,249,263,283,284,285,298,308,309,320,342,],[105,-114,-115,-116,-117,-118,-119,-130,105,105,105,105,105,105,105,-131,105,105,105,105,105,-98,-99,-100,-101,105,-103,-104,-105,-106,-107,-108,-109,-110,105,-112,-128,-129,105,-120,-122,105,105,-127,-121,105,-130,105,105,105,-124,-125,-126,105,105,105,-123,-132,-133,105,105,105,105,105,]),'COMA':([60,61,62,63,64,65,67,83,85,106,110,112,124,125,126,127,128,142,145,146,147,148,149,150,151,152,153,154,155,156,157,159,164,165,167,168,169,174,189,207,208,242,243,245,246,247,266,273,283,284,285,300,301,302,303,304,311,313,320,324,331,336,342,],[-114,-115,-116,-117,-118,-119,-130,134,-97,-111,134,-131,-91,-92,-93,-94,-95,199,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-112,-128,-129,-120,134,-122,134,-96,-127,-121,-79,-113,-124,-125,-126,297,297,-123,-132,-133,-50,325,-53,-54,-55,-78,-81,-62,-51,-80,-52,-61,]),'CORDER':([60,61,62,63,64,65,67,85,106,110,112,145,146,147,148,149,150,151,152,153,154,155,156,157,159,164,165,166,167,169,183,189,194,207,208,230,243,245,246,247,270,282,283,284,285,300,301,302,303,304,312,324,336,],[-114,-115,-116,-117,-118,-119,-130,-97,-111,167,-131,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-112,-128,-129,207,-120,-122,228,-96,238,-127,-121,271,-113,-124,-125,-126,300,313,-123,-132,-133,-50,324,-53,-54,-55,331,-51,-52,]),'LLAVEIZQ':([70,89,116,120,121,124,125,126,127,128,140,143,181,191,197,198,256,290,],[114,-83,175,179,180,-91,-92,-93,-94,-95,196,-77,226,232,-82,-76,291,316,]),'NUMBER':([78,87,141,177,178,201,211,241,252,280,],[124,124,124,124,124,124,124,124,124,124,]),'FLOAT':([78,87,141,177,178,201,211,241,252,280,],[125,125,125,125,125,125,125,125,125,125,]),'STRING':([78,87,141,177,178,201,211,241,252,280,],[126,126,126,126,126,126,126,126,126,126,]),'CHAR':([78,87,141,177,178,201,211,241,252,280,],[127,127,127,127,127,127,127,127,127,127,]),'BOOL':([78,87,141,177,178,201,211,241,252,280,],[128,128,128,128,128,128,128,128,128,128,]),'INDEXOF':([108,],[160,]),'POP':([108,],[161,]),'JOIN':([108,],[162,]),'TOSTRING':([108,],[163,]),'LENGTH':([108,],[164,]),'KEYS':([113,],[170,]),'VALUES':([113,],[171,]),'CASE':([179,220,221,261,334,],[223,223,-36,-35,-37,]),'DEFAULT':([179,220,221,261,334,],[224,224,-36,-35,-37,]),'PARSEINT':([192,],[235,]),'PARSEFLOAT':([192,],[236,]),'ELSE':([255,],[290,]),'TOLOWER':([274,],[306,]),'TOUPPER':([274,],[307,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'s':([0,],[1,]),'block':([0,175,180,196,262,290,291,316,],[2,215,225,239,294,317,318,332,]),'instruccion':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[3,40,3,3,3,40,40,40,3,3,3,40,3,40,40,40,]),'print':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'ifinstruction':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'forinstruction':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'switchinstruction':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'whileinstruction':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'declaration':([0,2,43,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[9,9,73,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'arraydeclaration':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'matrixdeclaration':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'assignment':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'assignmentsuma':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'assignmentresta':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'breakstmt':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'continuestmt':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'functionstmt':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'call':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'returnstmt':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'interfacecreation':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'interdeclaration':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'toLowerinstruction':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'toUpperinstruction':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'parseintinstruction':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'parsefloatinstruction':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'pushinstruction':([0,2,175,180,196,215,225,239,262,290,291,294,316,317,318,332,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'expression':([38,42,44,45,47,50,58,59,66,73,79,81,82,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,111,115,134,136,182,192,202,203,209,210,223,259,268,276,277,295,335,],[56,72,76,77,80,85,106,107,85,117,129,131,132,139,145,146,147,148,149,150,151,152,153,154,155,156,157,158,166,85,85,189,190,227,234,243,244,248,249,263,234,298,308,309,320,342,]),'listArray':([38,42,44,45,47,50,58,59,66,73,79,81,82,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,109,111,115,134,136,182,192,202,203,209,210,223,259,268,276,277,295,335,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'expressionList':([50,66,111,115,],[83,110,168,174,]),'funcparams':([55,],[89,]),'type':([78,87,141,177,178,201,211,241,252,280,],[123,138,197,218,219,242,251,281,289,311,]),'functype':([89,],[140,]),'paramsList':([90,],[142,]),'attributeList':([114,],[173,]),'corchetes':([123,138,],[184,193,]),'Recurinstruction':([176,],[216,]),'caseinstruction':([179,],[220,]),'caseindividual':([179,220,],[221,261,]),'cases':([179,220,],[222,222,]),'interfaceContent':([226,232,],[266,273,]),'matrixexpression':([229,237,270,325,],[269,278,304,304,]),'list_elements':([270,],[301,]),'value':([270,325,],[302,336,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> s","S'",1,None,None,None),
  ('s -> block','s',1,'p_start','parser.py',259),
  ('block -> block instruccion','block',2,'p_instruction_block','parser.py',263),
  ('block -> instruccion','block',1,'p_instruction_block','parser.py',264),
  ('instruccion -> print','instruccion',1,'p_instruction_list','parser.py',273),
  ('instruccion -> ifinstruction','instruccion',1,'p_instruction_list','parser.py',274),
  ('instruccion -> forinstruction','instruccion',1,'p_instruction_list','parser.py',275),
  ('instruccion -> switchinstruction','instruccion',1,'p_instruction_list','parser.py',276),
  ('instruccion -> whileinstruction','instruccion',1,'p_instruction_list','parser.py',277),
  ('instruccion -> declaration','instruccion',1,'p_instruction_list','parser.py',278),
  ('instruccion -> arraydeclaration','instruccion',1,'p_instruction_list','parser.py',279),
  ('instruccion -> matrixdeclaration','instruccion',1,'p_instruction_list','parser.py',280),
  ('instruccion -> assignment','instruccion',1,'p_instruction_list','parser.py',281),
  ('instruccion -> assignmentsuma','instruccion',1,'p_instruction_list','parser.py',282),
  ('instruccion -> assignmentresta','instruccion',1,'p_instruction_list','parser.py',283),
  ('instruccion -> breakstmt','instruccion',1,'p_instruction_list','parser.py',284),
  ('instruccion -> continuestmt','instruccion',1,'p_instruction_list','parser.py',285),
  ('instruccion -> functionstmt','instruccion',1,'p_instruction_list','parser.py',286),
  ('instruccion -> call','instruccion',1,'p_instruction_list','parser.py',287),
  ('instruccion -> returnstmt','instruccion',1,'p_instruction_list','parser.py',288),
  ('instruccion -> interfacecreation','instruccion',1,'p_instruction_list','parser.py',289),
  ('instruccion -> interdeclaration','instruccion',1,'p_instruction_list','parser.py',290),
  ('instruccion -> toLowerinstruction','instruccion',1,'p_instruction_list','parser.py',291),
  ('instruccion -> toUpperinstruction','instruccion',1,'p_instruction_list','parser.py',292),
  ('instruccion -> parseintinstruction','instruccion',1,'p_instruction_list','parser.py',293),
  ('instruccion -> parsefloatinstruction','instruccion',1,'p_instruction_list','parser.py',294),
  ('instruccion -> pushinstruction','instruccion',1,'p_instruction_list','parser.py',295),
  ('print -> CONSOLE PUNTO LOG PARIZQ expressionList PARDER PYC','print',7,'p_instruccion_console','parser.py',304),
  ('ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER','ifinstruction',7,'p_instruction_if','parser.py',310),
  ('ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER','ifinstruction',11,'p_instruction_if','parser.py',311),
  ('ifinstruction -> IF PARIZQ expression PARDER LLAVEIZQ block LLAVEDER ELSE block','ifinstruction',9,'p_instruction_if','parser.py',312),
  ('forinstruction -> FOR PARIZQ declaration expression PYC Recurinstruction PARDER LLAVEIZQ block LLAVEDER','forinstruction',10,'p_instruction_for','parser.py',325),
  ('Recurinstruction -> ID MAS MAS','Recurinstruction',3,'p_instruction_for_assign','parser.py',330),
  ('Recurinstruction -> ID MENOS MENOS','Recurinstruction',3,'p_instruction_for_assign','parser.py',331),
  ('switchinstruction -> SWITCH PARIZQ expression PARDER LLAVEIZQ caseinstruction LLAVEDER','switchinstruction',7,'p_instruction_switch','parser.py',338),
  ('caseinstruction -> caseinstruction caseindividual','caseinstruction',2,'p_instruction_mul_case','parser.py',343),
  ('caseinstruction -> caseindividual','caseinstruction',1,'p_instruction_mul_case','parser.py',344),
  ('caseindividual -> cases DOSPTS block BREAK PYC','caseindividual',5,'p_instruction_case','parser.py',353),
  ('cases -> CASE expression','cases',2,'p_instruction_case_default','parser.py',358),
  ('cases -> DEFAULT','cases',1,'p_instruction_case_default','parser.py',359),
  ('whileinstruction -> WHILE PARIZQ expression PARDER LLAVEIZQ block LLAVEDER','whileinstruction',7,'p_instruction_while','parser.py',367),
  ('declaration -> VAR ID DOSPTS type IG expression PYC','declaration',7,'p_instruccion_declaration','parser.py',373),
  ('declaration -> VAR ID IG expression PYC','declaration',5,'p_instruccion_declaration','parser.py',374),
  ('declaration -> CONST ID DOSPTS type IG expression PYC','declaration',7,'p_instruccion_declaration','parser.py',375),
  ('declaration -> CONST ID IG expression PYC','declaration',5,'p_instruccion_declaration','parser.py',376),
  ('arraydeclaration -> VAR ID DOSPTS type CORIZQ CORDER IG expression PYC','arraydeclaration',9,'p_instruccion_array_declaration','parser.py',385),
  ('matrixdeclaration -> CONST ID DOSPTS type corchetes IG matrixexpression PYC','matrixdeclaration',8,'p_instruction_const_matrix_declaration','parser.py',392),
  ('matrixdeclaration -> VAR ID DOSPTS type corchetes IG matrixexpression PYC','matrixdeclaration',8,'p_instruction_const_matrix_declaration','parser.py',393),
  ('corchetes -> corchetes CORIZQ CORDER','corchetes',3,'p_corchetes','parser.py',398),
  ('corchetes -> CORIZQ CORDER','corchetes',2,'p_corchetes','parser.py',399),
  ('matrixexpression -> CORIZQ CORDER','matrixexpression',2,'p_expression_empty_list','parser.py',406),
  ('matrixexpression -> CORIZQ list_elements CORDER','matrixexpression',3,'p_expression_matrix','parser.py',411),
  ('list_elements -> list_elements COMA value','list_elements',3,'p_expression_list_matrix','parser.py',415),
  ('list_elements -> value','list_elements',1,'p_expression_list_matrix','parser.py',416),
  ('value -> ENTERO','value',1,'p_value_num','parser.py',425),
  ('value -> matrixexpression','value',1,'p_value_list','parser.py',429),
  ('listaindices -> listaindices indice','listaindices',2,'p_indices_multiple','parser.py',442),
  ('listaindices -> indice','listaindices',1,'p_indices_multiple','parser.py',443),
  ('indice -> CORIZQ ENTERO CORDER','indice',3,'p_indice','parser.py',452),
  ('interdeclaration -> VAR ID DOSPTS ID IG LLAVEIZQ interfaceContent LLAVEDER PYC','interdeclaration',9,'p_instruction_interface_declaration','parser.py',459),
  ('interdeclaration -> CONST ID DOSPTS ID IG LLAVEIZQ interfaceContent LLAVEDER PYC','interdeclaration',9,'p_instruction_interface_declaration','parser.py',460),
  ('interfaceContent -> interfaceContent COMA ID DOSPTS expression','interfaceContent',5,'p_instruction_interface_content','parser.py',465),
  ('interfaceContent -> ID DOSPTS expression','interfaceContent',3,'p_instruction_interface_content','parser.py',466),
  ('assignment -> ID IG expression PYC','assignment',4,'p_instruccion_assignment','parser.py',478),
  ('assignmentsuma -> ID MAS IG expression PYC','assignmentsuma',5,'p_instruccion_assignment_suma','parser.py',484),
  ('assignmentresta -> ID MENOS IG expression PYC','assignmentresta',5,'p_instruccion_assignment_resta','parser.py',489),
  ('returnstmt -> RETURN expression PYC','returnstmt',3,'p_instruction_return','parser.py',495),
  ('returnstmt -> RETURN PYC','returnstmt',2,'p_instruction_return','parser.py',496),
  ('call -> ID PARIZQ expressionList PARDER PYC','call',5,'p_instruction_call_function','parser.py',505),
  ('call -> ID PARIZQ PARDER PYC','call',4,'p_instruction_call_function','parser.py',506),
  ('interfacecreation -> INTERFACE ID LLAVEIZQ attributeList LLAVEDER PYC','interfacecreation',6,'p_instruction_interface_creation','parser.py',515),
  ('attributeList -> attributeList ID DOSPTS type PYC','attributeList',5,'p_instruction_interface_attribute','parser.py',521),
  ('attributeList -> attributeList ID DOSPTS ID PYC','attributeList',5,'p_instruction_interface_attribute','parser.py',522),
  ('attributeList -> ID DOSPTS ID PYC','attributeList',4,'p_instruction_interface_attribute','parser.py',523),
  ('attributeList -> ID DOSPTS type PYC','attributeList',4,'p_instruction_interface_attribute','parser.py',524),
  ('functionstmt -> FUNC ID funcparams functype LLAVEIZQ block LLAVEDER','functionstmt',7,'p_instruction_function','parser.py',536),
  ('funcparams -> PARIZQ paramsList PARDER','funcparams',3,'p_instruction_function_params_list','parser.py',541),
  ('funcparams -> PARIZQ PARDER','funcparams',2,'p_instruction_function_params_list','parser.py',542),
  ('paramsList -> paramsList COMA ID DOSPTS type','paramsList',5,'p_expression_param_list','parser.py',549),
  ('paramsList -> ID DOSPTS type','paramsList',3,'p_expression_param_list','parser.py',550),
  ('paramsList -> paramsList ID DOSPTS type CORIZQ CORDER','paramsList',6,'p_expression_param_list','parser.py',551),
  ('paramsList -> ID DOSPTS type CORIZQ CORDER','paramsList',5,'p_expression_param_list','parser.py',552),
  ('functype -> DOSPTS type','functype',2,'p_instruction_function_type','parser.py',570),
  ('functype -> <empty>','functype',0,'p_instruction_function_type','parser.py',571),
  ('breakstmt -> BREAK PYC','breakstmt',2,'p_instruction_break','parser.py',578),
  ('continuestmt -> CONTINUE PYC','continuestmt',2,'p_instruction_continue','parser.py',583),
  ('toLowerinstruction -> CONST ID DOSPTS type IG ID PUNTO TOLOWER PARIZQ PARDER PYC','toLowerinstruction',11,'p_instruccion_toLowerCase','parser.py',590),
  ('toUpperinstruction -> CONST ID DOSPTS type IG ID PUNTO TOUPPER PARIZQ PARDER PYC','toUpperinstruction',11,'p_instruccion_toUpperCase','parser.py',600),
  ('parseintinstruction -> CONST ID DOSPTS type IG PARSEINT PARIZQ expression PARDER PYC','parseintinstruction',10,'p_instruccion_parseInt','parser.py',609),
  ('parsefloatinstruction -> CONST ID DOSPTS type IG PARSEFLOAT PARIZQ expression PARDER PYC','parsefloatinstruction',10,'p_instruccion_parseFloat','parser.py',618),
  ('pushinstruction -> ID PUNTO PUSH PARIZQ expression PARDER PYC','pushinstruction',7,'p_instruccion_push','parser.py',627),
  ('type -> NUMBER','type',1,'p_type_prod','parser.py',632),
  ('type -> FLOAT','type',1,'p_type_prod','parser.py',633),
  ('type -> STRING','type',1,'p_type_prod','parser.py',634),
  ('type -> CHAR','type',1,'p_type_prod','parser.py',635),
  ('type -> BOOL','type',1,'p_type_prod','parser.py',636),
  ('expressionList -> expressionList COMA expression','expressionList',3,'p_expression_list','parser.py',650),
  ('expressionList -> expression','expressionList',1,'p_expression_list','parser.py',651),
  ('expression -> expression MAS expression','expression',3,'p_expression_add','parser.py',660),
  ('expression -> expression MENOS expression','expression',3,'p_expression_sub','parser.py',665),
  ('expression -> expression POR expression','expression',3,'p_expression_mult','parser.py',670),
  ('expression -> expression DIVIDIDO expression','expression',3,'p_expression_div','parser.py',675),
  ('expression -> expression MODULO expression','expression',3,'p_expression_mod','parser.py',680),
  ('expression -> expression MAYOR expression','expression',3,'p_expression_mayor','parser.py',685),
  ('expression -> expression MENOR expression','expression',3,'p_expression_menor','parser.py',690),
  ('expression -> expression MAYORIG expression','expression',3,'p_expression_mayor_igual','parser.py',695),
  ('expression -> expression MENORIG expression','expression',3,'p_expression_menor_igual','parser.py',700),
  ('expression -> expression IGIG expression','expression',3,'p_expression_igual','parser.py',705),
  ('expression -> expression DIF expression','expression',3,'p_expression_diferente','parser.py',710),
  ('expression -> expression AND expression','expression',3,'p_expression_and','parser.py',715),
  ('expression -> expression OR expression','expression',3,'p_expression_or','parser.py',720),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',725),
  ('expression -> PARIZQ expression PARDER','expression',3,'p_expression_agrupacion','parser.py',730),
  ('expression -> expression TERN expression DOSPTS expression','expression',5,'p_expression_ternario','parser.py',734),
  ('expression -> ENTERO','expression',1,'p_expression_primitiva','parser.py',740),
  ('expression -> DECIMAL','expression',1,'p_expression_primitiva','parser.py',741),
  ('expression -> BOOLEANO','expression',1,'p_expression_primitiva','parser.py',742),
  ('expression -> CADENA','expression',1,'p_expression_primitiva','parser.py',743),
  ('expression -> CARACTER','expression',1,'p_expression_primitiva','parser.py',744),
  ('expression -> listArray','expression',1,'p_expression_primitiva','parser.py',745),
  ('expression -> CORIZQ expressionList CORDER','expression',3,'p_expression_array_primitiva','parser.py',755),
  ('expression -> ID PARIZQ expressionList PARDER','expression',4,'p_expression_call_function','parser.py',760),
  ('expression -> ID PARIZQ PARDER','expression',3,'p_expression_call_function','parser.py',761),
  ('listArray -> listArray PUNTO INDEXOF PARIZQ expression PARDER','listArray',6,'p_expression_list_array','parser.py',770),
  ('listArray -> listArray PUNTO POP PARIZQ PARDER','listArray',5,'p_expression_list_array','parser.py',771),
  ('listArray -> listArray PUNTO JOIN PARIZQ PARDER','listArray',5,'p_expression_list_array','parser.py',772),
  ('listArray -> listArray PUNTO TOSTRING PARIZQ PARDER','listArray',5,'p_expression_list_array','parser.py',773),
  ('listArray -> listArray CORIZQ expression CORDER','listArray',4,'p_expression_list_array','parser.py',774),
  ('listArray -> listArray PUNTO LENGTH','listArray',3,'p_expression_list_array','parser.py',775),
  ('listArray -> listArray PUNTO ID','listArray',3,'p_expression_list_array','parser.py',776),
  ('listArray -> ID','listArray',1,'p_expression_list_array','parser.py',777),
  ('expression -> TYPEOF ID','expression',2,'p_instruccion_typeof','parser.py',799),
  ('expression -> OBJECT PUNTO KEYS PARIZQ expression PARDER','expression',6,'p_expression_interface_options','parser.py',804),
  ('expression -> OBJECT PUNTO VALUES PARIZQ expression PARDER','expression',6,'p_expression_interface_options','parser.py',805),
]
